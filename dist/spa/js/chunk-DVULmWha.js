var g=Object.defineProperty;var m=(i,e,t)=>e in i?g(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var u=(i,e,t)=>m(i,typeof e!="symbol"?e+"":e,t);import{t as w,a as l}from"./chunk-BQSuEa5o.js";function E(...i){return w(l(i))}const p="/api",d=window.fetch.bind(window);window.__originalFetch=d;class y{constructor(e){u(this,"baseURL");u(this,"authToken",null);this.baseURL=e,this.authToken=localStorage.getItem("bd_ticket_pro_token")}async request(e,t={}){const s=`${this.baseURL}${e}`,a={headers:{"Content-Type":"application/json",...this.authToken&&{Authorization:`Bearer ${this.authToken}`},...t.headers},...t};try{console.log(`API Request: ${t.method||"GET"} ${s}`);const r=await d(s,a);console.log(`API Response: ${r.status} ${r.statusText}`);const o=r.headers.get("content-type");let n;if(o&&o.includes("application/json"))try{n=await r.json()}catch(c){console.error("JSON parsing error:",c),n={success:r.ok,message:`Failed to parse JSON response: ${r.status}`}}else{const c=await r.text();n={success:r.ok,message:c||`HTTP ${r.status}`,data:c}}if(!r.ok){r.status===401&&(this.authToken=null,localStorage.removeItem("bd_ticket_pro_token"),localStorage.removeItem("bd_ticket_pro_user"));let c=n.message||`HTTP error! status: ${r.status}`;throw n.errors&&Array.isArray(n.errors)&&(c=`Validation error: ${n.errors.map(h=>`${h.path?.join?.(".")||"Field"}: ${h.message}`).join(", ")}`),new Error(c)}return n}catch(r){throw console.error(`API request failed: ${e}`,r),r instanceof TypeError&&r.message.includes("Failed to fetch")?(console.error("Network error detected. Server may be down or unreachable."),new Error("Unable to connect to server. Please check your connection and try again.")):r}}async login(e){const t=await this.request("/auth/login",{method:"POST",body:JSON.stringify(e)});if(t.success&&t.data)return this.authToken=t.data.token,localStorage.setItem("bd_ticket_pro_token",t.data.token),localStorage.setItem("bd_ticket_pro_user",JSON.stringify(t.data.user)),t.data;throw new Error(t.message||"Login failed")}async logout(){try{await this.request("/auth/logout",{method:"POST"})}finally{this.authToken=null,localStorage.removeItem("bd_ticket_pro_token"),localStorage.removeItem("bd_ticket_pro_user")}}async getCurrentUser(){const e=await this.request("/auth/me");if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to get user")}async getDashboardStats(){const e=await this.request("/tickets/dashboard/stats");if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to get dashboard stats")}async getCountries(){const e=await this.request("/tickets/countries/stats");if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to get countries")}async getTickets(e){const t=new URLSearchParams;e&&Object.entries(e).forEach(([r,o])=>{o!==void 0&&t.append(r,o.toString())});const s=`/tickets${t.toString()?`?${t.toString()}`:""}`,a=await this.request(s);if(a.success&&a.data)return a.data;throw new Error(a.message||"Failed to get tickets")}async getTicketsByCountry(e,t){const s=new URLSearchParams;t&&Object.entries(t).forEach(([o,n])=>{n!==void 0&&s.append(o,n.toString())});const a=`/tickets/country/${e}${s.toString()?`?${s.toString()}`:""}`,r=await this.request(a);if(r.success&&r.data)return r.data;throw new Error(r.message||"Failed to get country tickets")}async getAllTickets(e){const t=new URLSearchParams;e&&Object.entries(e).forEach(([r,o])=>{o!==void 0&&t.append(r,o.toString())});const s=`/tickets/all${t.toString()?`?${t.toString()}`:""}`,a=await this.request(s);if(a.success&&a.data)return a.data.tickets||[];throw new Error(a.message||"Failed to get all tickets")}async getTicketById(e){const t=await this.request(`/tickets/${e}`);if(t.success&&t.data)return t.data.ticket;throw new Error(t.message||"Failed to get ticket")}async updateTicketStatus(e,t){const s=await this.request(`/tickets/${e}/status`,{method:"PATCH",body:JSON.stringify({status:t})});if(!s.success)throw new Error(s.message||"Failed to update ticket status")}async getTicketBatches(e){const t=new URLSearchParams;e&&Object.entries(e).forEach(([r,o])=>{o!==void 0&&t.append(r,o.toString())});const s=`/ticket-batches${t.toString()?`?${t.toString()}`:""}`,a=await this.request(s);if(a.success&&a.data)return a.data;throw new Error(a.message||"Failed to get ticket batches")}async createTicketBatch(e){const t=await this.request("/ticket-batches",{method:"POST",body:JSON.stringify(e)});if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to create ticket batch")}async getBookings(e,t=0){try{const s=new URLSearchParams;e&&Object.entries(e).forEach(([o,n])=>{n!==void 0&&s.append(o,n.toString())});const a=`/bookings${s.toString()?`?${s.toString()}`:""}`,r=await this.request(a);if(r.success&&r.data)return r.data.bookings||[];throw new Error(r.message||"Failed to get bookings")}catch(s){if(t<2&&s instanceof Error&&(s.message.includes("Failed to fetch")||s.message.includes("Network error")||s.message.includes("Unable to connect")))return console.log(`Retrying getBookings (attempt ${t+1})`),await new Promise(a=>setTimeout(a,1e3*(t+1))),this.getBookings(e,t+1);throw s}}async createBooking(e){const t=await this.request("/bookings",{method:"POST",body:JSON.stringify(e)});if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to create booking")}async updateBookingStatus(e,t){const s=await this.request(`/bookings/${e}/status`,{method:"PATCH",body:JSON.stringify({status:t})});if(!s.success)throw new Error(s.message||"Failed to update booking status")}async cancelBooking(e){const t=await this.request(`/bookings/${e}`,{method:"DELETE"});if(!t.success)throw new Error(t.message||"Failed to cancel booking")}async getUsers(){const e=await this.request("/users");if(e.success&&e.data)return e.data.users||[];throw new Error(e.message||"Failed to get users")}async createUser(e){const t=await this.request("/users",{method:"POST",body:JSON.stringify(e)});if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to create user")}async updateUser(e,t){const s=await this.request(`/users/${e}`,{method:"PUT",body:JSON.stringify(t)});if(s.success&&s.data)return s.data;throw new Error(s.message||"Failed to update user")}async updateProfile(e){const t=await this.request("/users/profile/me",{method:"PUT",body:JSON.stringify(e)});if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to update profile")}async updatePassword(e){const t=await this.request("/users/profile/password",{method:"PUT",body:JSON.stringify(e)});if(!t.success)throw new Error(t.message||"Failed to update password")}async deleteUser(e){const t=await this.request(`/users/${e}`,{method:"DELETE"});if(!t.success)throw new Error(t.message||"Failed to delete user")}async getSettings(){const e=await this.request("/settings");if(e.success&&e.data)return{settings:e.data.settings||[]};throw new Error(e.message||"Failed to get settings")}async updateSettings(e){const t=await this.request("/settings",{method:"PUT",body:JSON.stringify(e)});if(!t.success)throw new Error(t.message||"Failed to update settings")}async exportData(e="json"){const t=await fetch(`${this.baseURL}/settings/export/data?format=${e}`,{headers:{...this.authToken&&{Authorization:`Bearer ${this.authToken}`}}});if(!t.ok)throw new Error("Failed to export data");return t.blob()}async getActivityLogs(e){const t=new URLSearchParams;e&&Object.entries(e).forEach(([r,o])=>{o!==void 0&&t.append(r,o.toString())});const s=`/settings/logs/activity${t.toString()?`?${t.toString()}`:""}`,a=await this.request(s);if(a.success&&a.data)return a.data;throw new Error(a.message||"Failed to get activity logs")}async getSystemInfo(){const e=await this.request("/settings/system-info");if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to get system information")}async createBackup(){const e=await this.request("/settings/backup",{method:"POST"});if(e.success)return e.data;throw new Error(e.message||"Failed to create backup")}async getUmrahWithTransport(e){const t=e?`?search=${encodeURIComponent(e)}`:"",s=await this.request(`/umrah/with-transport${t}`);if(s.success&&s.data)return s.data;throw new Error(s.message||"Failed to get umrah with transport packages")}async getUmrahWithTransportById(e){const t=await this.request(`/umrah/with-transport/${e}`);if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to get umrah with transport package")}async createUmrahWithTransport(e){const t=await this.request("/umrah/with-transport",{method:"POST",body:JSON.stringify(e)});if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to create umrah with transport package")}async updateUmrahWithTransport(e,t){const s=await this.request(`/umrah/with-transport/${e}`,{method:"PUT",body:JSON.stringify(t)});if(s.success&&s.data)return s.data;throw new Error(s.message||"Failed to update umrah with transport package")}async deleteUmrahWithTransport(e){const t=await this.request(`/umrah/with-transport/${e}`,{method:"DELETE"});if(!t.success)throw new Error(t.message||"Failed to delete umrah with transport package")}async getUmrahWithoutTransport(e,t){const s=new URLSearchParams;e&&s.append("search",e),t&&s.append("pending_only","true");const a=s.toString()?`?${s.toString()}`:"",r=await this.request(`/umrah/without-transport${a}`);if(r.success&&r.data)return r.data;throw new Error(r.message||"Failed to get umrah without transport packages")}async getUmrahWithoutTransportById(e){const t=await this.request(`/umrah/without-transport/${e}`);if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to get umrah without transport package")}async createUmrahWithoutTransport(e){const t=await this.request("/umrah/without-transport",{method:"POST",body:JSON.stringify(e)});if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to create umrah without transport package")}async updateUmrahWithoutTransport(e,t){const s=await this.request(`/umrah/without-transport/${e}`,{method:"PUT",body:JSON.stringify(t)});if(s.success&&s.data)return s.data;throw new Error(s.message||"Failed to update umrah without transport package")}async recordUmrahPayment(e,t){const s=await this.request(`/umrah/without-transport/${e}/payment`,{method:"POST",body:JSON.stringify(t)});if(s.success&&s.data)return s.data;throw new Error(s.message||"Failed to record payment")}async deleteUmrahWithoutTransport(e){const t=await this.request(`/umrah/without-transport/${e}`,{method:"DELETE"});if(!t.success)throw new Error(t.message||"Failed to delete umrah without transport package")}async getUmrahPaymentSummary(){const e=await this.request("/umrah/payment-summary");if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to get payment summary")}async getUmrahStats(){const e=await this.request("/umrah/stats");if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to get umrah statistics")}async getUmrahGroupTickets(e,t){const s=new URLSearchParams;e&&s.append("package_type",e),t&&s.append("search",t);const a=s.toString()?`?${s.toString()}`:"",r=await this.request(`/umrah/group-tickets${a}`);if(r.success&&r.data)return r.data;throw new Error(r.message||"Failed to get group tickets")}async getUmrahGroupTicketsByDates(e){const t=await this.request(`/umrah/group-tickets/by-dates/${e}`);if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to get grouped tickets by dates")}async getUmrahGroupTicketById(e){const t=await this.request(`/umrah/group-tickets/${e}`);if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to get group ticket")}async createUmrahGroupTicket(e){const t=await this.request("/umrah/group-tickets",{method:"POST",body:JSON.stringify(e)});if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to create group ticket")}async updateUmrahGroupTicket(e,t){const s=await this.request(`/umrah/group-tickets/${e}`,{method:"PUT",body:JSON.stringify(t)});if(s.success&&s.data)return s.data;throw new Error(s.message||"Failed to update group ticket")}async deleteUmrahGroupTicket(e,t=!1){const s=t?`/umrah/group-tickets/${e}?force=true`:`/umrah/group-tickets/${e}`,a=await this.request(s,{method:"DELETE"});if(!a.success){const r=new Error(a.message||"Failed to delete group ticket");throw r.canForceDelete=a.canForceDelete,r.details=a.details,r}}async getAvailableGroupTickets(e,t,s){const a=await this.request(`/umrah/group-tickets/available/${e}/${t}/${s}`);if(a.success&&a.data)return a.data;throw new Error(a.message||"Failed to get available group tickets")}async assignPassengerToGroup(e){const t=await this.request("/umrah/group-bookings",{method:"POST",body:JSON.stringify(e)});if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to assign passenger to group")}async removePassengerFromGroup(e){const t=await this.request(`/umrah/group-bookings/${e}`,{method:"DELETE"});if(!t.success)throw new Error(t.message||"Failed to remove passenger from group")}}const f=new y(p),{login:U,logout:b,getCurrentUser:F,getDashboardStats:$,getCountries:q,getTickets:P,getTicketsByCountry:O,getTicketById:B,updateTicketStatus:N,getTicketBatches:_,createTicketBatch:I,getBookings:L,createBooking:J,updateBookingStatus:W,cancelBooking:v,getUsers:G,createUser:R,updateUser:D,updateProfile:A,updatePassword:j,deleteUser:x,getSettings:C,updateSettings:H,exportData:M,getActivityLogs:z,getSystemInfo:V,createBackup:K,getUmrahWithTransport:Q,getUmrahWithTransportById:X,createUmrahWithTransport:Y,updateUmrahWithTransport:Z,deleteUmrahWithTransport:tt,getUmrahWithoutTransport:et,getUmrahWithoutTransportById:st,createUmrahWithoutTransport:rt,updateUmrahWithoutTransport:at,recordUmrahPayment:ot,deleteUmrahWithoutTransport:it,getUmrahPaymentSummary:nt,getUmrahStats:ct,getUmrahGroupTickets:ut,getUmrahGroupTicketsByDates:ht,getUmrahGroupTicketById:dt,createUmrahGroupTicket:gt,updateUmrahGroupTicket:mt,deleteUmrahGroupTicket:wt,getAvailableGroupTickets:lt,assignPassengerToGroup:pt,removePassengerFromGroup:yt}=f;function ft(i,e="BDT"){return isNaN(i)||!isFinite(i)?"৳0":`৳${(Math.round(i*100)/100).toLocaleString("en-BD",{minimumFractionDigits:0,maximumFractionDigits:2})}`}function kt(i,e,t){if(isNaN(i)||isNaN(e)||isNaN(t))return 0;const s=(i-e)*t;return Math.round(s*100)/100}const Tt=i=>{const e=i.replace(/[\s-]/g,"");return/^(\+880|880|0)?(1[3-9]\d{8})$/.test(e)};export{f as a,kt as b,E as c,ft as f,Tt as v};
