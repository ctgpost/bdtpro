var p=Object.defineProperty;var y=(o,t,e)=>t in o?p(o,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[t]=e;var d=(o,t,e)=>y(o,typeof t!="symbol"?t+"":t,e);import{t as f,a as k}from"./chunk-Dc0hOMSw.js";function F(...o){return f(k(o))}const w=window.fetch.bind(window);window.__originalFetch=w;const T=[{code:"SA",name:"Saudi Arabia",flag:"ðŸ‡¸ðŸ‡¦",totalTickets:150,availableTickets:85},{code:"AE",name:"United Arab Emirates",flag:"ðŸ‡¦ðŸ‡ª",totalTickets:95,availableTickets:42},{code:"TR",name:"Turkey",flag:"ðŸ‡¹ðŸ‡·",totalTickets:75,availableTickets:30},{code:"MY",name:"Malaysia",flag:"ðŸ‡²ðŸ‡¾",totalTickets:120,availableTickets:75},{code:"ID",name:"Indonesia",flag:"ðŸ‡®ðŸ‡©",totalTickets:80,availableTickets:25}],m=[{id:"1",batchId:"B001",country:"SA",ticketNumber:"SA-00001",status:"available",sellingPrice:850},{id:"2",batchId:"B001",country:"SA",ticketNumber:"SA-00002",status:"booked",sellingPrice:850},{id:"3",batchId:"B002",country:"AE",ticketNumber:"AE-00001",status:"available",sellingPrice:720},{id:"4",batchId:"B003",country:"TR",ticketNumber:"TR-00001",status:"sold",sellingPrice:650}],g=[{id:"B001",country:"SA",airline:"Saudi Airlines",flightDate:"2025-10-15",flightTime:"14:30",buyingPrice:650,quantity:50,agentName:"Saudi Travel Agency",createdAt:"2025-09-01",createdBy:"admin"},{id:"B002",country:"AE",airline:"Emirates",flightDate:"2025-10-20",flightTime:"10:15",buyingPrice:580,quantity:30,agentName:"Dubai Connect",createdAt:"2025-09-05",createdBy:"admin"}],l=[{id:"BK001",customerName:"Ahmed Hassan",ticketId:"2",bookingDate:"2025-09-20",travelDate:"2025-10-15",amount:850,status:"confirmed"}],c=o=>new Promise(t=>setTimeout(t,o));class S{constructor(t){d(this,"baseURL");d(this,"authToken",null);this.baseURL=t,this.authToken=localStorage.getItem("bd_ticket_pro_token")}async request(t,e={}){const a=`${this.baseURL}${t}`,s={headers:{"Content-Type":"application/json",...this.authToken&&{Authorization:`Bearer ${this.authToken}`},...e.headers},...e};try{console.log(`API Request: ${e.method||"GET"} ${a}`);const r=await w(a,s);console.log(`API Response: ${r.status} ${r.statusText}`);const n=r.headers.get("content-type");let i;if(n&&n.includes("application/json"))try{i=await r.json()}catch(u){console.error("JSON parsing error:",u),i={success:r.ok,message:`Failed to parse JSON response: ${r.status}`}}else{const u=await r.text();i={success:r.ok,message:u||`HTTP ${r.status}`,data:u}}if(!r.ok){r.status===401&&(this.authToken=null,localStorage.removeItem("bd_ticket_pro_token"),localStorage.removeItem("bd_ticket_pro_user"));let u=i.message||`HTTP error! status: ${r.status}`;throw i.errors&&Array.isArray(i.errors)&&(u=`Validation error: ${i.errors.map(h=>`${h.path?.join?.(".")||"Field"}: ${h.message}`).join(", ")}`),new Error(u)}return i}catch(r){throw console.error(`API request failed: ${t}`,r),r instanceof TypeError&&r.message.includes("Failed to fetch")?(console.error("Network error detected. Server may be down or unreachable."),new Error("Unable to connect to server. Please check your connection and try again.")):r}}async login(t){await c(500);const e={admin:{user:{id:"1",username:"admin",role:"admin",name:"Admin User",email:"admin@example.com",phone:"+1234567890",createdAt:new Date().toISOString()},token:"demo-jwt-token-admin"},manager:{user:{id:"2",username:"manager",role:"manager",name:"Manager User",email:"manager@example.com",phone:"+1234567891",createdAt:new Date().toISOString()},token:"demo-jwt-token-manager"},staff:{user:{id:"3",username:"staff",role:"staff",name:"Staff User",email:"staff@example.com",phone:"+1234567892",createdAt:new Date().toISOString()},token:"demo-jwt-token-staff"}};if(e[t.username]&&t.password===`${t.username}123`)return e[t.username];if(t.password==="demo")return{user:{id:"demo-"+Date.now(),username:t.username,role:"admin",name:`${t.username} (Demo)`,email:`${t.username}@demo.com`,createdAt:new Date().toISOString()},token:"demo-jwt-token-demo"};throw new Error("Invalid username or password")}async logout(){return await c(100),{success:!0}}async getCurrentUser(){await c(200);const t=localStorage.getItem("bd_ticket_pro_user");if(t)return JSON.parse(t);throw new Error("Not authenticated")}async getDashboardStats(){return await c(300),{totalTickets:500,availableTickets:280,bookedTickets:150,soldTickets:70,totalBookings:220,recentActivity:[{id:1,action:"Ticket booked",user:"Staff User",time:"2 mins ago"},{id:2,action:"New ticket batch",user:"Admin User",time:"1 hour ago"},{id:3,action:"Payment received",user:"Manager User",time:"3 hours ago"}]}}async getCountries(){return await c(300),T}async getTickets(t){return await c(300),t?.country?m.filter(e=>e.country===t.country):m}async getTicketsByCountry(t,e){const a=new URLSearchParams;e&&Object.entries(e).forEach(([n,i])=>{i!==void 0&&a.append(n,i.toString())});const s=`/tickets/country/${t}${a.toString()?`?${a.toString()}`:""}`,r=await this.request(s);if(r.success&&r.data)return r.data;throw new Error(r.message||"Failed to get country tickets")}async getAllTickets(t){const e=new URLSearchParams;t&&Object.entries(t).forEach(([r,n])=>{n!==void 0&&e.append(r,n.toString())});const a=`/tickets/all${e.toString()?`?${e.toString()}`:""}`,s=await this.request(a);if(s.success&&s.data)return s.data.tickets||[];throw new Error(s.message||"Failed to get all tickets")}async getTicketById(t){const e=await this.request(`/tickets/${t}`);if(e.success&&e.data)return e.data.ticket;throw new Error(e.message||"Failed to get ticket")}async updateTicketStatus(t,e){const a=await this.request(`/tickets/${t}/status`,{method:"PATCH",body:JSON.stringify({status:e})});if(!a.success)throw new Error(a.message||"Failed to update ticket status")}async getTicketBatches(){return await c(300),g}async createTicketBatch(t){return await c(500),{success:!0,message:"Ticket batch created successfully",data:{id:"B"+(g.length+1).toString().padStart(3,"0"),...t,createdAt:new Date().toISOString(),createdBy:"current-user"}}}async getBookings(){return await c(300),l}async createBooking(t){return await c(500),{success:!0,message:"Booking created successfully",data:{id:"BK"+(l.length+1).toString().padStart(3,"0"),...t,status:"confirmed"}}}async updateBookingStatus(t,e){const a=await this.request(`/bookings/${t}/status`,{method:"PATCH",body:JSON.stringify({status:e})});if(!a.success)throw new Error(a.message||"Failed to update booking status")}async cancelBooking(t){const e=await this.request(`/bookings/${t}`,{method:"DELETE"});if(!e.success)throw new Error(e.message||"Failed to cancel booking")}async getUsers(){const t=await this.request("/users");if(t.success&&t.data)return t.data.users||[];throw new Error(t.message||"Failed to get users")}async createUser(t){const e=await this.request("/users",{method:"POST",body:JSON.stringify(t)});if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to create user")}async updateUser(t,e){const a=await this.request(`/users/${t}`,{method:"PUT",body:JSON.stringify(e)});if(a.success&&a.data)return a.data;throw new Error(a.message||"Failed to update user")}async updateProfile(t){const e=await this.request("/users/profile/me",{method:"PUT",body:JSON.stringify(t)});if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to update profile")}async updatePassword(t){const e=await this.request("/users/profile/password",{method:"PUT",body:JSON.stringify(t)});if(!e.success)throw new Error(e.message||"Failed to update password")}async deleteUser(t){const e=await this.request(`/users/${t}`,{method:"DELETE"});if(!e.success)throw new Error(e.message||"Failed to delete user")}async getSettings(){const t=await this.request("/settings");if(t.success&&t.data)return{settings:t.data.settings||[]};throw new Error(t.message||"Failed to get settings")}async updateSettings(t){const e=await this.request("/settings",{method:"PUT",body:JSON.stringify(t)});if(!e.success)throw new Error(e.message||"Failed to update settings")}async exportData(t="json"){const e=await fetch(`${this.baseURL}/settings/export/data?format=${t}`,{headers:{...this.authToken&&{Authorization:`Bearer ${this.authToken}`}}});if(!e.ok)throw new Error("Failed to export data");return e.blob()}async getActivityLogs(t){const e=new URLSearchParams;t&&Object.entries(t).forEach(([r,n])=>{n!==void 0&&e.append(r,n.toString())});const a=`/settings/logs/activity${e.toString()?`?${e.toString()}`:""}`,s=await this.request(a);if(s.success&&s.data)return s.data;throw new Error(s.message||"Failed to get activity logs")}async getSystemInfo(){const t=await this.request("/settings/system-info");if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to get system information")}async createBackup(){const t=await this.request("/settings/backup",{method:"POST"});if(t.success)return t.data;throw new Error(t.message||"Failed to create backup")}async getUmrahWithTransport(t){const e=t?`?search=${encodeURIComponent(t)}`:"",a=await this.request(`/umrah/with-transport${e}`);if(a.success&&a.data)return a.data;throw new Error(a.message||"Failed to get umrah with transport packages")}async getUmrahWithTransportById(t){const e=await this.request(`/umrah/with-transport/${t}`);if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to get umrah with transport package")}async createUmrahWithTransport(t){const e=await this.request("/umrah/with-transport",{method:"POST",body:JSON.stringify(t)});if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to create umrah with transport package")}async updateUmrahWithTransport(t,e){const a=await this.request(`/umrah/with-transport/${t}`,{method:"PUT",body:JSON.stringify(e)});if(a.success&&a.data)return a.data;throw new Error(a.message||"Failed to update umrah with transport package")}async deleteUmrahWithTransport(t){const e=await this.request(`/umrah/with-transport/${t}`,{method:"DELETE"});if(!e.success)throw new Error(e.message||"Failed to delete umrah with transport package")}async getUmrahWithoutTransport(t,e){const a=new URLSearchParams;t&&a.append("search",t),e&&a.append("pending_only","true");const s=a.toString()?`?${a.toString()}`:"",r=await this.request(`/umrah/without-transport${s}`);if(r.success&&r.data)return r.data;throw new Error(r.message||"Failed to get umrah without transport packages")}async getUmrahWithoutTransportById(t){const e=await this.request(`/umrah/without-transport/${t}`);if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to get umrah without transport package")}async createUmrahWithoutTransport(t){const e=await this.request("/umrah/without-transport",{method:"POST",body:JSON.stringify(t)});if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to create umrah without transport package")}async updateUmrahWithoutTransport(t,e){const a=await this.request(`/umrah/without-transport/${t}`,{method:"PUT",body:JSON.stringify(e)});if(a.success&&a.data)return a.data;throw new Error(a.message||"Failed to update umrah without transport package")}async recordUmrahPayment(t,e){const a=await this.request(`/umrah/without-transport/${t}/payment`,{method:"POST",body:JSON.stringify(e)});if(a.success&&a.data)return a.data;throw new Error(a.message||"Failed to record payment")}async deleteUmrahWithoutTransport(t){const e=await this.request(`/umrah/without-transport/${t}`,{method:"DELETE"});if(!e.success)throw new Error(e.message||"Failed to delete umrah without transport package")}async getUmrahPaymentSummary(){const t=await this.request("/umrah/payment-summary");if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to get payment summary")}async getUmrahStats(){const t=await this.request("/umrah/stats");if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to get umrah statistics")}async getUmrahGroupTickets(t,e){const a=new URLSearchParams;t&&a.append("package_type",t),e&&a.append("search",e);const s=a.toString()?`?${a.toString()}`:"",r=await this.request(`/umrah/group-tickets${s}`);if(r.success&&r.data)return r.data;throw new Error(r.message||"Failed to get group tickets")}async getUmrahGroupTicketsByDates(t){const e=await this.request(`/umrah/group-tickets/by-dates/${t}`);if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to get grouped tickets by dates")}async getUmrahGroupTicketById(t){const e=await this.request(`/umrah/group-tickets/${t}`);if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to get group ticket")}async createUmrahGroupTicket(t){const e=await this.request("/umrah/group-tickets",{method:"POST",body:JSON.stringify(t)});if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to create group ticket")}async updateUmrahGroupTicket(t,e){const a=await this.request(`/umrah/group-tickets/${t}`,{method:"PUT",body:JSON.stringify(e)});if(a.success&&a.data)return a.data;throw new Error(a.message||"Failed to update group ticket")}async deleteUmrahGroupTicket(t,e=!1){const a=e?`/umrah/group-tickets/${t}?force=true`:`/umrah/group-tickets/${t}`,s=await this.request(a,{method:"DELETE"});if(!s.success){const r=new Error(s.message||"Failed to delete group ticket");throw r.canForceDelete=s.canForceDelete,r.details=s.details,r}}async getAvailableGroupTickets(t,e,a){const s=await this.request(`/umrah/group-tickets/available/${t}/${e}/${a}`);if(s.success&&s.data)return s.data;throw new Error(s.message||"Failed to get available group tickets")}async assignPassengerToGroup(t){const e=await this.request("/umrah/group-bookings",{method:"POST",body:JSON.stringify(t)});if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to assign passenger to group")}async removePassengerFromGroup(t){const e=await this.request(`/umrah/group-bookings/${t}`,{method:"DELETE"});if(!e.success)throw new Error(e.message||"Failed to remove passenger from group")}}const U=new S;function q(o,t="BDT"){return isNaN(o)||!isFinite(o)?"à§³0":`à§³${(Math.round(o*100)/100).toLocaleString("en-BD",{minimumFractionDigits:0,maximumFractionDigits:2})}`}function P(o,t,e){if(isNaN(o)||isNaN(t)||isNaN(e))return 0;const a=(o-t)*e;return Math.round(a*100)/100}const O=o=>{const t=o.replace(/[\s-]/g,"");return/^(\+880|880|0)?(1[3-9]\d{8})$/.test(t)};export{U as a,P as b,F as c,q as f,O as v};
