var p=Object.defineProperty;var T=(o,t,e)=>t in o?p(o,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[t]=e;var _=(o,t,e)=>T(o,typeof t!="symbol"?t+"":t,e);import{t as w,a as f}from"./chunk-Dc0hOMSw.js";function k(...o){return w(f(o))}const h=window.fetch.bind(window);window.__originalFetch=h;const S=[{code:"SA",name:"Saudi Arabia",flag:"ðŸ‡¸ðŸ‡¦",totalTickets:150,availableTickets:85},{code:"AE",name:"United Arab Emirates",flag:"ðŸ‡¦ðŸ‡ª",totalTickets:95,availableTickets:42},{code:"TR",name:"Turkey",flag:"ðŸ‡¹ðŸ‡·",totalTickets:75,availableTickets:30},{code:"MY",name:"Malaysia",flag:"ðŸ‡²ðŸ‡¾",totalTickets:120,availableTickets:75},{code:"ID",name:"Indonesia",flag:"ðŸ‡®ðŸ‡©",totalTickets:80,availableTickets:25}],g=[{id:"1",batchId:"B001",country:"SA",ticketNumber:"SA-00001",status:"available",sellingPrice:850},{id:"2",batchId:"B001",country:"SA",ticketNumber:"SA-00002",status:"booked",sellingPrice:850},{id:"3",batchId:"B002",country:"AE",ticketNumber:"AE-00001",status:"available",sellingPrice:720},{id:"4",batchId:"B003",country:"TR",ticketNumber:"TR-00001",status:"sold",sellingPrice:650}],l=[{id:"B001",country:"SA",airline:"Saudi Airlines",flightDate:"2025-10-15",flightTime:"14:30",buyingPrice:650,quantity:50,agentName:"Saudi Travel Agency",createdAt:"2025-09-01",createdBy:"admin"},{id:"B002",country:"AE",airline:"Emirates",flightDate:"2025-10-20",flightTime:"10:15",buyingPrice:580,quantity:30,agentName:"Dubai Connect",createdAt:"2025-09-05",createdBy:"admin"}],s=o=>new Promise(t=>setTimeout(t,o));class y{constructor(t){_(this,"baseURL");_(this,"authToken",null);_(this,"DEMO_UMRAH_WITH_TRANSPORT",[{id:"1",passenger_name:"Md. Abdullah Al Mamun",pnr:"ABC123XYZ",passport_number:"P12345678",flight_airline_name:"Saudi Airlines",departure_date:"2025-10-15",return_date:"2025-10-25",approved_by:"Travel Agency",reference_agency:"Dhaka Travel",emergency_flight_contact:"+8801712345678",passenger_mobile:"+8801987654321",created_at:"2025-09-20T10:30:00Z",updated_at:"2025-09-20T10:30:00Z"},{id:"2",passenger_name:"Fatema Begum",pnr:"DEF456UVW",passport_number:"P87654321",flight_airline_name:"Emirates",departure_date:"2025-11-05",return_date:"2025-11-15",approved_by:"Travel Agency",reference_agency:"Chittagong Tours",emergency_flight_contact:"+8801612345678",passenger_mobile:"+8801876543210",created_at:"2025-09-18T14:15:00Z",updated_at:"2025-09-18T14:15:00Z"}]);_(this,"DEMO_UMRAH_WITHOUT_TRANSPORT",[{id:"1",flight_departure_date:"2025-10-20",return_date:"2025-10-30",passenger_name:"Ahmed Hossain",passport_number:"P11223344",entry_recorded_by:"Staff User",total_amount:85e3,amount_paid:5e4,remaining_amount:35e3,last_payment_date:"2025-09-25",remarks:"Partial payment received",created_at:"2025-09-15T09:45:00Z",updated_at:"2025-09-25T11:20:00Z"}]);_(this,"DEMO_UMRAH_GROUP_TICKETS",[{id:"1",group_name:"Ramadan Special Group",package_type:"with-transport",departure_date:"2025-10-15",return_date:"2025-10-25",ticket_count:50,total_cost:4e6,average_cost_per_ticket:8e4,agent_name:"Premium Travel Agency",agent_contact:"+8801711111111",purchase_notes:"Early bird booking with 10% discount",departure_airline:"Saudi Airlines",departure_flight_number:"SA123",departure_time:"02:30",departure_route:"DAC-JED",return_airline:"Saudi Airlines",return_flight_number:"SA456",return_time:"18:45",return_route:"JED-DAC",remaining_tickets:25,created_at:"2025-09-01T08:30:00Z",updated_at:"2025-09-01T08:30:00Z"},{id:"2",group_name:"October Group Package",package_type:"with-transport",departure_date:"2025-10-20",return_date:"2025-10-30",ticket_count:30,total_cost:25e5,average_cost_per_ticket:83333,agent_name:"Budget Tours",agent_contact:"+8801822222222",purchase_notes:"Standard package without extra amenities",departure_airline:"Emirates",departure_flight_number:"EK789",departure_time:"22:15",departure_route:"DAC-DXB-JED",return_airline:"Emirates",return_flight_number:"EK101",return_time:"15:30",return_route:"JED-DXB-DAC",remaining_tickets:15,created_at:"2025-09-10T16:45:00Z",updated_at:"2025-09-10T16:45:00Z"}]);this.baseURL=t,this.authToken=localStorage.getItem("bd_ticket_pro_token")}async request(t,e={}){const a=`${this.baseURL}${t}`,r={headers:{"Content-Type":"application/json",...this.authToken&&{Authorization:`Bearer ${this.authToken}`},...e.headers},...e};try{console.log(`API Request: ${e.method||"GET"} ${a}`);const n=await h(a,r);console.log(`API Response: ${n.status} ${n.statusText}`);const i=n.headers.get("content-type");let c;if(i&&i.includes("application/json"))try{c=await n.json()}catch(u){console.error("JSON parsing error:",u),c={success:n.ok,message:`Failed to parse JSON response: ${n.status}`}}else{const u=await n.text();c={success:n.ok,message:u||`HTTP ${n.status}`,data:u}}if(!n.ok){n.status===401&&(this.authToken=null,localStorage.removeItem("bd_ticket_pro_token"),localStorage.removeItem("bd_ticket_pro_user"));let u=c.message||`HTTP error! status: ${n.status}`;throw c.errors&&Array.isArray(c.errors)&&(u=`Validation error: ${c.errors.map(d=>`${d.path?.join?.(".")||"Field"}: ${d.message}`).join(", ")}`),new Error(u)}return c}catch(n){throw console.error(`API request failed: ${t}`,n),n instanceof TypeError&&n.message.includes("Failed to fetch")?(console.error("Network error detected. Server may be down or unreachable."),new Error("Unable to connect to server. Please check your connection and try again.")):n}}async login(t){await s(500);const e={admin:{user:{id:"1",username:"admin",role:"admin",name:"Admin User",email:"admin@example.com",phone:"+1234567890",createdAt:new Date().toISOString()},token:"demo-jwt-token-admin"},manager:{user:{id:"2",username:"manager",role:"manager",name:"Manager User",email:"manager@example.com",phone:"+1234567891",createdAt:new Date().toISOString()},token:"demo-jwt-token-manager"},staff:{user:{id:"3",username:"staff",role:"staff",name:"Staff User",email:"staff@example.com",phone:"+1234567892",createdAt:new Date().toISOString()},token:"demo-jwt-token-staff"}};if(e[t.username]&&t.password===`${t.username}123`)return e[t.username];if(t.password==="demo")return{user:{id:"demo-"+Date.now(),username:t.username,role:"admin",name:`${t.username} (Demo)`,email:`${t.username}@demo.com`,createdAt:new Date().toISOString()},token:"demo-jwt-token-demo"};throw new Error("Invalid username or password")}async logout(){return await s(100),{success:!0}}async getCurrentUser(){await s(200);const t=localStorage.getItem("bd_ticket_pro_user");if(t)return JSON.parse(t);throw new Error("Not authenticated")}async getDashboardStats(){return await s(300),{totalTickets:500,availableTickets:280,bookedTickets:150,soldTickets:70,totalBookings:220,recentActivity:[{id:1,action:"Ticket booked",user:"Staff User",time:"2 mins ago"},{id:2,action:"New ticket batch",user:"Admin User",time:"1 hour ago"},{id:3,action:"Payment received",user:"Manager User",time:"3 hours ago"}]}}async getCountries(){return await s(300),S}async getTickets(t){return await s(300),t?.country?g.filter(e=>e.country===t.country):g}async getTicketsByCountry(t,e){const a=new URLSearchParams;e&&Object.entries(e).forEach(([i,c])=>{c!==void 0&&a.append(i,c.toString())});const r=`/tickets/country/${t}${a.toString()?`?${a.toString()}`:""}`,n=await this.request(r);if(n.success&&n.data)return n.data;throw new Error(n.message||"Failed to get country tickets")}async getAllTickets(t){const e=new URLSearchParams;t&&Object.entries(t).forEach(([n,i])=>{i!==void 0&&e.append(n,i.toString())});const a=`/tickets/all${e.toString()?`?${e.toString()}`:""}`,r=await this.request(a);if(r.success&&r.data)return r.data.tickets||[];throw new Error(r.message||"Failed to get all tickets")}async getTicketById(t){const e=await this.request(`/tickets/${t}`);if(e.success&&e.data)return e.data.ticket;throw new Error(e.message||"Failed to get ticket")}async updateTicketStatus(t,e){const a=await this.request(`/tickets/${t}/status`,{method:"PATCH",body:JSON.stringify({status:e})});if(!a.success)throw new Error(a.message||"Failed to update ticket status")}async getTicketBatches(){return await s(300),l}async createTicketBatch(t){return await s(500),{success:!0,message:"Ticket batch created successfully",data:{id:"B"+(l.length+1).toString().padStart(3,"0"),...t,createdAt:new Date().toISOString(),createdBy:"current-user"}}}async getBookings(){return await s(300),[{id:"1",ticket_id:"SA001",customer_name:"Md. Rahman",customer_email:"rahman@example.com",customer_phone:"+8801712345678",country_code:"SA",ticket_type:"Economy",departure_date:"2025-10-15",return_date:"2025-10-25",total_amount:85e3,amount_paid:85e3,status:"confirmed",agent_id:"agent001",agent_name:"Travel Agent 1",notes:"Full payment received",created_at:"2025-09-20T10:30:00Z",updated_at:"2025-09-20T10:30:00Z"},{id:"2",ticket_id:"SA002",customer_name:"Fatema Begum",customer_email:"fatema@example.com",customer_phone:"+8801987654321",country_code:"SA",ticket_type:"Business",departure_date:"2025-10-18",return_date:"2025-10-28",total_amount:15e4,amount_paid:75e3,status:"pending",agent_id:"agent002",agent_name:"Travel Agent 2",notes:"50% advance payment received",created_at:"2025-09-22T14:15:00Z",updated_at:"2025-09-22T14:15:00Z"},{id:"3",ticket_id:"AE001",customer_name:"Ahmed Hossain",customer_email:"ahmed@example.com",customer_phone:"+8801612345678",country_code:"AE",ticket_type:"Economy",departure_date:"2025-11-05",return_date:"2025-11-15",total_amount:75e3,amount_paid:0,status:"pending",agent_id:"agent001",agent_name:"Travel Agent 1",notes:"Booking confirmed, payment pending",created_at:"2025-09-25T09:45:00Z",updated_at:"2025-09-25T09:45:00Z"},{id:"4",ticket_id:"SA003",customer_name:"Tasnim Khan",customer_email:"tasnim@example.com",customer_phone:"+8801555555555",country_code:"SA",ticket_type:"First Class",departure_date:"2025-09-10",return_date:"2025-09-20",total_amount:2e5,amount_paid:2e5,status:"cancelled",agent_id:"agent003",agent_name:"Travel Agent 3",notes:"Customer cancelled due to personal reasons",created_at:"2025-09-01T11:20:00Z",updated_at:"2025-09-15T16:30:00Z"}]}async getBookingById(t){await s(300);const a=(await this.getBookings()).find(r=>r.id===t);if(!a)throw new Error("Booking not found");return a}async createBooking(t){return await s(500),{id:Math.random().toString(36).substring(2,9),...t,status:"pending",created_at:new Date().toISOString(),updated_at:new Date().toISOString()}}async updateBooking(t,e){return await s(500),{id:t,...e,updated_at:new Date().toISOString()}}async updateBookingStatus(t,e){return await s(500),{id:t,status:e,updated_at:new Date().toISOString()}}async cancelBooking(t){return await s(500),{id:t,status:"cancelled",updated_at:new Date().toISOString()}}async getUsers(){const t=await this.request("/users");if(t.success&&t.data)return t.data.users||[];throw new Error(t.message||"Failed to get users")}async createUser(t){const e=await this.request("/users",{method:"POST",body:JSON.stringify(t)});if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to create user")}async updateUser(t,e){const a=await this.request(`/users/${t}`,{method:"PUT",body:JSON.stringify(e)});if(a.success&&a.data)return a.data;throw new Error(a.message||"Failed to update user")}async updateProfile(t){const e=await this.request("/users/profile/me",{method:"PUT",body:JSON.stringify(t)});if(e.success&&e.data)return e.data;throw new Error(e.message||"Failed to update profile")}async updatePassword(t){const e=await this.request("/users/profile/password",{method:"PUT",body:JSON.stringify(t)});if(!e.success)throw new Error(e.message||"Failed to update password")}async deleteUser(t){const e=await this.request(`/users/${t}`,{method:"DELETE"});if(!e.success)throw new Error(e.message||"Failed to delete user")}async getSettings(){const t=await this.request("/settings");if(t.success&&t.data)return{settings:t.data.settings||[]};throw new Error(t.message||"Failed to get settings")}async updateSettings(t){const e=await this.request("/settings",{method:"PUT",body:JSON.stringify(t)});if(!e.success)throw new Error(e.message||"Failed to update settings")}async exportData(t="json"){const e=await fetch(`${this.baseURL}/settings/export/data?format=${t}`,{headers:{...this.authToken&&{Authorization:`Bearer ${this.authToken}`}}});if(!e.ok)throw new Error("Failed to export data");return e.blob()}async getActivityLogs(t){const e=new URLSearchParams;t&&Object.entries(t).forEach(([n,i])=>{i!==void 0&&e.append(n,i.toString())});const a=`/settings/logs/activity${e.toString()?`?${e.toString()}`:""}`,r=await this.request(a);if(r.success&&r.data)return r.data;throw new Error(r.message||"Failed to get activity logs")}async getSystemInfo(){const t=await this.request("/settings/system-info");if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to get system information")}async createBackup(){const t=await this.request("/settings/backup",{method:"POST"});if(t.success)return t.data;throw new Error(t.message||"Failed to create backup")}async getUmrahWithTransport(t){if(await s(300),t){const e=t.toLowerCase();return this.DEMO_UMRAH_WITH_TRANSPORT.filter(a=>a.passenger_name.toLowerCase().includes(e)||a.pnr.toLowerCase().includes(e)||a.passport_number.toLowerCase().includes(e))}return this.DEMO_UMRAH_WITH_TRANSPORT}async getUmrahWithTransportById(t){await s(300);const e=this.DEMO_UMRAH_WITH_TRANSPORT.find(a=>a.id===t);if(e)return e;throw new Error("Package not found")}async createUmrahWithTransport(t){await s(500);const e={id:`UMRAH-${Date.now()}-${Math.floor(Math.random()*1e3)}`,...t,created_at:new Date().toISOString(),updated_at:new Date().toISOString()};return this.DEMO_UMRAH_WITH_TRANSPORT.push(e),e}async updateUmrahWithTransport(t,e){await s(500);const a=this.DEMO_UMRAH_WITH_TRANSPORT.findIndex(r=>r.id===t);if(a!==-1){const r={...this.DEMO_UMRAH_WITH_TRANSPORT[a],...e,updated_at:new Date().toISOString()};return this.DEMO_UMRAH_WITH_TRANSPORT[a]=r,r}throw new Error("Package not found")}async deleteUmrahWithTransport(t){await s(300);const e=this.DEMO_UMRAH_WITH_TRANSPORT.length;if(this.DEMO_UMRAH_WITH_TRANSPORT=this.DEMO_UMRAH_WITH_TRANSPORT.filter(a=>a.id!==t),this.DEMO_UMRAH_WITH_TRANSPORT.length===e)throw new Error("Package not found")}async getUmrahWithoutTransport(t,e){await s(300);let a=[...this.DEMO_UMRAH_WITHOUT_TRANSPORT];if(e&&(a=a.filter(r=>r.amount_paid<r.total_amount)),t){const r=t.toLowerCase();a=a.filter(n=>n.passenger_name.toLowerCase().includes(r)||n.passport_number.toLowerCase().includes(r)||n.remarks?.toLowerCase().includes(r)||!1)}return a}async getUmrahWithoutTransportById(t){await s(300);const e=this.DEMO_UMRAH_WITHOUT_TRANSPORT.find(a=>a.id===t);if(e)return e;throw new Error("Package not found")}async createUmrahWithoutTransport(t){await s(500);const e={id:`UMRAH-${Date.now()}-${Math.floor(Math.random()*1e3)}`,...t,remaining_amount:t.total_amount-t.amount_paid,created_at:new Date().toISOString(),updated_at:new Date().toISOString()};return this.DEMO_UMRAH_WITHOUT_TRANSPORT.push(e),e}async updateUmrahWithoutTransport(t,e){await s(500);const a=this.DEMO_UMRAH_WITHOUT_TRANSPORT.findIndex(r=>r.id===t);if(a!==-1){const r={...this.DEMO_UMRAH_WITHOUT_TRANSPORT[a],...e,remaining_amount:e.total_amount-e.amount_paid,updated_at:new Date().toISOString()};return this.DEMO_UMRAH_WITHOUT_TRANSPORT[a]=r,r}throw new Error("Package not found")}async recordUmrahPayment(t,e){await s(300);const a=this.DEMO_UMRAH_WITHOUT_TRANSPORT.findIndex(r=>r.id===t);if(a!==-1){const r=this.DEMO_UMRAH_WITHOUT_TRANSPORT[a],n={...r,amount_paid:r.amount_paid+e.amount,remaining_amount:r.remaining_amount-e.amount,last_payment_date:e.payment_date||new Date().toISOString(),updated_at:new Date().toISOString()};return this.DEMO_UMRAH_WITHOUT_TRANSPORT[a]=n,n}throw new Error("Package not found")}async deleteUmrahWithoutTransport(t){await s(300);const e=this.DEMO_UMRAH_WITHOUT_TRANSPORT.length;if(this.DEMO_UMRAH_WITHOUT_TRANSPORT=this.DEMO_UMRAH_WITHOUT_TRANSPORT.filter(a=>a.id!==t),this.DEMO_UMRAH_WITHOUT_TRANSPORT.length===e)throw new Error("Package not found")}async getUmrahPaymentSummary(){const t=await this.request("/umrah/payment-summary");if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to get payment summary")}async getUmrahStats(){const t=await this.request("/umrah/stats");if(t.success&&t.data)return t.data;throw new Error(t.message||"Failed to get umrah statistics")}async getUmrahGroupTickets(t,e){await s(300);let a=[...this.DEMO_UMRAH_GROUP_TICKETS];if(t&&(a=a.filter(r=>r.package_type===t)),e){const r=e.toLowerCase();a=a.filter(n=>n.group_name.toLowerCase().includes(r)||n.agent_name.toLowerCase().includes(r))}return a}async getUmrahGroupTicketsByDates(t){await s(300);const e=[],a={};return(t?this.DEMO_UMRAH_GROUP_TICKETS.filter(n=>n.package_type===t):this.DEMO_UMRAH_GROUP_TICKETS).forEach(n=>{const i=`${n.departure_date}-${n.return_date}`;a[i]||(a[i]=[]),a[i].push(n)}),Object.entries(a).forEach(([n,i])=>{const[c,u]=n.split("-");e.push({departure_date:c,return_date:u,group_count:i.length,total_tickets:i.reduce((m,d)=>m+d.ticket_count,0),total_cost:i.reduce((m,d)=>m+d.total_cost,0),groups:i})}),e}async getUmrahGroupTicketById(t){await s(300);const e=this.DEMO_UMRAH_GROUP_TICKETS.find(a=>a.id===t);if(e)return e;throw new Error("Group ticket not found")}async createUmrahGroupTicket(t){await s(500);const e={id:`GROUP-${Date.now()}-${Math.floor(Math.random()*1e3)}`,...t,average_cost_per_ticket:Math.round(t.total_cost/t.ticket_count),remaining_tickets:t.ticket_count,created_at:new Date().toISOString(),updated_at:new Date().toISOString()};return this.DEMO_UMRAH_GROUP_TICKETS.push(e),e}async updateUmrahGroupTicket(t,e){await s(500);const a=this.DEMO_UMRAH_GROUP_TICKETS.findIndex(r=>r.id===t);if(a!==-1){const r={...this.DEMO_UMRAH_GROUP_TICKETS[a],...e,average_cost_per_ticket:Math.round(e.total_cost/e.ticket_count),updated_at:new Date().toISOString()};return this.DEMO_UMRAH_GROUP_TICKETS[a]=r,r}throw new Error("Group ticket not found")}async deleteUmrahGroupTicket(t,e=!1){await s(300);const a=this.DEMO_UMRAH_GROUP_TICKETS.length;if(this.DEMO_UMRAH_GROUP_TICKETS=this.DEMO_UMRAH_GROUP_TICKETS.filter(r=>r.id!==t),this.DEMO_UMRAH_GROUP_TICKETS.length===a)throw new Error("Group ticket not found")}async getAvailableGroupTickets(t,e,a){return await s(300),[{id:"1",group_name:"October Special Group",package_type:t,departure_date:e,return_date:a,ticket_count:25,total_cost:2e6,average_cost_per_ticket:8e4,agent_name:"Dhaka Travel Agency",agent_contact:"+8801712345678",purchase_notes:"Special discount for early booking",departure_airline:"Saudi Airlines",departure_flight_number:"SA123",departure_time:"02:30",departure_route:"DAC-JED",return_airline:"Saudi Airlines",return_flight_number:"SA456",return_time:"18:45",return_route:"JED-DAC",remaining_tickets:10,created_at:"2025-09-01T08:30:00Z",updated_at:"2025-09-01T08:30:00Z"}]}async assignPassengerToGroup(t){return await s(300),{id:`ASSIGN-${Date.now()}`,...t,assigned_at:new Date().toISOString()}}async removePassengerFromGroup(t){await s(300)}}const E=new y;function R(o,t="BDT"){return isNaN(o)||!isFinite(o)?"à§³0":`à§³${(Math.round(o*100)/100).toLocaleString("en-BD",{minimumFractionDigits:0,maximumFractionDigits:2})}`}function U(o,t,e){if(isNaN(o)||isNaN(t)||isNaN(e))return 0;const a=(o-t)*e;return Math.round(a*100)/100}const M=o=>{const t=o.replace(/[\s-]/g,"");return/^(\+880|880|0)?(1[3-9]\d{8})$/.test(t)};export{E as a,U as b,k as c,R as f,M as v};
