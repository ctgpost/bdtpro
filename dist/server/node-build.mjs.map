{"version":3,"file":"node-build.mjs","sources":["../../server/database/schema.ts","../../server/database/models.ts","../../server/middleware/auth.ts","../../server/routes/auth.ts","../../server/routes/tickets.ts","../../server/routes/ticket-batches.ts","../../server/routes/bookings.ts","../../server/routes/users.ts","../../server/routes/settings.ts","../../server/routes/umrah.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { Pool, QueryResult } from 'pg';\nimport * as bcrypt from \"bcryptjs\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// PostgreSQL connection pool\nlet pool: Pool;\n\n// Check if we have a DATABASE_URL (for platforms like Heroku, Render)\nif (process.env.DATABASE_URL) {\n  pool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: {\n      rejectUnauthorized: false\n    }\n  });\n} else {\n  // Use individual connection parameters\n  pool = new Pool({\n    user: process.env.DB_USER || 'postgres',\n    host: process.env.DB_HOST || 'localhost',\n    database: process.env.DB_NAME || 'bd_ticketpro',\n    password: process.env.DB_PASSWORD || 'postgres',\n    port: parseInt(process.env.DB_PORT || '5432'),\n  });\n}\n\n// Function to execute queries\nexport const query = async (text: string, params?: any[]): Promise<QueryResult> => {\n  const start = Date.now();\n  const res = await pool.query(text, params);\n  const duration = Date.now() - start;\n  console.log('Executed query', { text, duration, rows: res.rowCount });\n  return res;\n};\n\n// Initialize database with tables\nexport async function initializeDatabase() {\n  try {\n    // Create users table\n    await query(`\n      CREATE TABLE IF NOT EXISTS users (\n        id UUID PRIMARY KEY,\n        username TEXT UNIQUE NOT NULL,\n        password_hash TEXT NOT NULL,\n        name TEXT NOT NULL,\n        email TEXT,\n        phone TEXT,\n        role TEXT NOT NULL CHECK (role IN ('admin', 'manager', 'staff')),\n        status TEXT NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'inactive')),\n        last_login TIMESTAMPTZ,\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n      )\n    `);\n\n    // Create countries table\n    await query(`\n      CREATE TABLE IF NOT EXISTS countries (\n        id SERIAL PRIMARY KEY,\n        code CHAR(2) UNIQUE NOT NULL,\n        name TEXT NOT NULL,\n        flag_emoji TEXT,\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n      )\n    `);\n\n    // Create airlines table\n    await query(`\n      CREATE TABLE IF NOT EXISTS airlines (\n        id SERIAL PRIMARY KEY,\n        name TEXT NOT NULL,\n        country_code CHAR(2),\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n      )\n    `);\n\n    // Create ticket_batches table (admin buying)\n    await query(`\n      CREATE TABLE IF NOT EXISTS ticket_batches (\n        id SERIAL PRIMARY KEY,\n        country_id INTEGER NOT NULL,\n        airline_id INTEGER,\n        flight_date DATE NOT NULL,\n        flight_time TIME,\n        buying_price DECIMAL(10, 2) NOT NULL,\n        quantity INTEGER NOT NULL,\n        agent_name TEXT,\n        agent_contact TEXT,\n        remarks TEXT,\n        created_by UUID NOT NULL,\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        FOREIGN KEY (country_id) REFERENCES countries(id),\n        FOREIGN KEY (airline_id) REFERENCES airlines(id),\n        FOREIGN KEY (created_by) REFERENCES users(id)\n      )\n    `);\n\n    // Create tickets table\n    await query(`\n      CREATE TABLE IF NOT EXISTS tickets (\n        id SERIAL PRIMARY KEY,\n        batch_id INTEGER NOT NULL,\n        ticket_number TEXT UNIQUE,\n        selling_price DECIMAL(10, 2),\n        status TEXT NOT NULL DEFAULT 'available' CHECK (status IN ('available', 'booked', 'locked', 'sold', 'cancelled')),\n        locked_by UUID,\n        locked_at TIMESTAMPTZ,\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        FOREIGN KEY (batch_id) REFERENCES ticket_batches(id),\n        FOREIGN KEY (locked_by) REFERENCES users(id)\n      )\n    `);\n\n    // Create customers table\n    await query(`\n      CREATE TABLE IF NOT EXISTS customers (\n        id SERIAL PRIMARY KEY,\n        name TEXT NOT NULL,\n        email TEXT,\n        phone TEXT,\n        passport_number TEXT,\n        address TEXT,\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n      )\n    `);\n\n    // Create bookings table\n    await query(`\n      CREATE TABLE IF NOT EXISTS bookings (\n        id SERIAL PRIMARY KEY,\n        customer_id INTEGER NOT NULL,\n        ticket_id INTEGER,\n        booking_date DATE NOT NULL,\n        travel_date DATE NOT NULL,\n        amount DECIMAL(10, 2) NOT NULL,\n        payment_type TEXT NOT NULL DEFAULT 'full' CHECK (payment_type IN ('full', 'partial')),\n        status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'cancelled')),\n        comments TEXT,\n        created_by UUID NOT NULL,\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        FOREIGN KEY (customer_id) REFERENCES customers(id),\n        FOREIGN KEY (ticket_id) REFERENCES tickets(id),\n        FOREIGN KEY (created_by) REFERENCES users(id)\n      )\n    `);\n\n    // Create umrah_packages table\n    await query(`\n      CREATE TABLE IF NOT EXISTS umrah_packages (\n        id SERIAL PRIMARY KEY,\n        name TEXT NOT NULL,\n        description TEXT,\n        departure_date DATE NOT NULL,\n        return_date DATE NOT NULL,\n        hotel_name TEXT,\n        hotel_location TEXT,\n        room_type TEXT NOT NULL DEFAULT 'double' CHECK (room_type IN ('single', 'double', 'triple')),\n        price_per_person DECIMAL(10, 2) NOT NULL,\n        status TEXT NOT NULL DEFAULT 'upcoming' CHECK (status IN ('active', 'upcoming', 'completed')),\n        created_by UUID NOT NULL,\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        FOREIGN KEY (created_by) REFERENCES users(id)\n      )\n    `);\n\n    // Create umrah_group_tickets table\n    await query(`\n      CREATE TABLE IF NOT EXISTS umrah_group_tickets (\n        id SERIAL PRIMARY KEY,\n        package_id INTEGER NOT NULL,\n        ticket_count INTEGER NOT NULL,\n        available_count INTEGER NOT NULL DEFAULT 0,\n        sold_count INTEGER NOT NULL DEFAULT 0,\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        FOREIGN KEY (package_id) REFERENCES umrah_packages(id)\n      )\n    `);\n\n    // Create activity_logs table\n    await query(`\n      CREATE TABLE IF NOT EXISTS activity_logs (\n        id SERIAL PRIMARY KEY,\n        user_id UUID,\n        action TEXT NOT NULL,\n        description TEXT,\n        ip_address TEXT,\n        user_agent TEXT,\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        FOREIGN KEY (user_id) REFERENCES users(id)\n      )\n    `);\n\n    // Create settings table\n    await query(`\n      CREATE TABLE IF NOT EXISTS settings (\n        id SERIAL PRIMARY KEY,\n        setting_key TEXT UNIQUE NOT NULL,\n        setting_value TEXT,\n        description TEXT,\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n      )\n    `);\n\n    // Create sessions table\n    await query(`\n      CREATE TABLE IF NOT EXISTS sessions (\n        id TEXT PRIMARY KEY,\n        user_id UUID NOT NULL,\n        expires_at TIMESTAMPTZ NOT NULL,\n        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n        FOREIGN KEY (user_id) REFERENCES users(id)\n      )\n    `);\n\n    // Create indexes for better performance\n    await query(`CREATE INDEX IF NOT EXISTS idx_tickets_status ON tickets(status)`);\n    await query(`CREATE INDEX IF NOT EXISTS idx_tickets_batch_id ON tickets(batch_id)`);\n    await query(`CREATE INDEX IF NOT EXISTS idx_bookings_status ON bookings(status)`);\n    await query(`CREATE INDEX IF NOT EXISTS idx_bookings_customer_id ON bookings(customer_id)`);\n    await query(`CREATE INDEX IF NOT EXISTS idx_bookings_ticket_id ON bookings(ticket_id)`);\n    await query(`CREATE INDEX IF NOT EXISTS idx_ticket_batches_country_id ON ticket_batches(country_id)`);\n    await query(`CREATE INDEX IF NOT EXISTS idx_customers_passport ON customers(passport_number)`);\n    await query(`CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)`);\n    await query(`CREATE INDEX IF NOT EXISTS idx_umrah_packages_status ON umrah_packages(status)`);\n    await query(`CREATE INDEX IF NOT EXISTS idx_activity_logs_user_id ON activity_logs(user_id)`);\n    await query(`CREATE INDEX IF NOT EXISTS idx_activity_logs_created_at ON activity_logs(created_at)`);\n\n    console.log('Database initialized successfully');\n  } catch (error) {\n    console.error('Error initializing database:', error);\n    throw error;\n  }\n}\n\n// User functions\nexport async function createUser(userData: any) {\n  const id = uuidv4();\n  const hashedPassword = await bcrypt.hash(userData.password, 10);\n  \n  const result = await query(\n    `INSERT INTO users (id, username, password_hash, name, email, phone, role)\n     VALUES ($1, $2, $3, $4, $5, $6, $7)\n     RETURNING id, username, name, email, phone, role, status, created_at, updated_at`,\n    [\n      id,\n      userData.username,\n      hashedPassword,\n      userData.name,\n      userData.email,\n      userData.phone,\n      userData.role\n    ]\n  );\n  \n  return result.rows[0];\n}\n\nexport async function findUserByUsername(username: string) {\n  const result = await query(\n    'SELECT * FROM users WHERE username = $1',\n    [username]\n  );\n  \n  return result.rows[0];\n}\n\nexport async function findUserById(id: string) {\n  const result = await query(\n    'SELECT * FROM users WHERE id = $1',\n    [id]\n  );\n  \n  return result.rows[0];\n}\n\n// Country functions\nexport async function createCountry(countryData: any) {\n  const result = await query(\n    `INSERT INTO countries (code, name, flag_emoji)\n     VALUES ($1, $2, $3)\n     RETURNING *`,\n    [countryData.code, countryData.name, countryData.flag_emoji]\n  );\n  \n  return result.rows[0];\n}\n\nexport async function getAllCountries() {\n  const result = await query('SELECT * FROM countries ORDER BY name');\n  return result.rows;\n}\n\n// Settings functions\nexport async function getSetting(key: string) {\n  const result = await query(\n    'SELECT setting_value FROM settings WHERE setting_key = $1',\n    [key]\n  );\n  \n  return result.rows[0]?.setting_value;\n}\n\nexport async function setSetting(key: string, value: string) {\n  const result = await query(\n    `INSERT INTO settings (setting_key, setting_value)\n     VALUES ($1, $2)\n     ON CONFLICT (setting_key)\n     DO UPDATE SET setting_value = $2, updated_at = NOW()\n     RETURNING *`,\n    [key, value]\n  );\n  \n  return result.rows[0];\n}","import { query } from \"./schema\";\nimport bcrypt from \"bcryptjs\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// User model\nexport interface User {\n  id: string;\n  username: string;\n  password_hash?: string;\n  name: string;\n  email?: string;\n  phone?: string;\n  role: \"admin\" | \"manager\" | \"staff\";\n  status: \"active\" | \"inactive\";\n  last_login?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport class UserRepository {\n  static async findById(id: string): Promise<User | undefined> {\n    const result = await query(\"SELECT * FROM users WHERE id = $1\", [id]);\n    return result.rows[0] as User;\n  }\n\n  static async findByUsername(username: string): Promise<User | undefined> {\n    const result = await query(\"SELECT * FROM users WHERE username = $1\", [username]);\n    return result.rows[0] as User;\n  }\n\n  static async findAll(): Promise<User[]> {\n    const result = await query(\"SELECT * FROM users ORDER BY created_at DESC\");\n    return result.rows as User[];\n  }\n\n  static async create(\n    userData: Omit<User, \"id\" | \"created_at\" | \"updated_at\"> & {\n      password: string;\n    }\n  ): Promise<User> {\n    const id = uuidv4();\n    const password_hash = bcrypt.hashSync(userData.password, 10);\n    const now = new Date().toISOString();\n\n    const result = await query(\n      `INSERT INTO users (id, username, password_hash, name, email, phone, role, status, created_at, updated_at)\n       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *`,\n      [\n        id,\n        userData.username,\n        password_hash,\n        userData.name,\n        userData.email,\n        userData.phone,\n        userData.role,\n        userData.status,\n        now,\n        now,\n      ]\n    );\n\n    return result.rows[0] as User;\n  }\n\n  static async updateLastLogin(userId: string): Promise<void> {\n    await query(\n      \"UPDATE users SET last_login = $1, updated_at = $1 WHERE id = $2\",\n      [new Date().toISOString(), userId]\n    );\n  }\n\n  static verifyPassword(password: string, hash: string): boolean {\n    return bcrypt.compareSync(password, hash);\n  }\n}\n\n// Country model\nexport interface Country {\n  code: string;\n  name: string;\n  flag: string;\n  created_at: string;\n}\n\nexport class CountryRepository {\n  static async findAll(): Promise<Country[]> {\n    const result = await query(\"SELECT * FROM countries ORDER BY name\");\n    return result.rows as Country[];\n  }\n\n  static async findByCode(code: string): Promise<Country | undefined> {\n    const result = await query(\"SELECT * FROM countries WHERE code = $1\", [code]);\n    return result.rows[0] as Country;\n  }\n}\n\n// Ticket models\nexport interface TicketBatch {\n  id: string;\n  country_code: string;\n  airline: string;\n  flight_date: string;\n  flight_time: string;\n  buying_price: number;\n  quantity: number;\n  agent_name: string;\n  agent_contact?: string;\n  agent_address?: string;\n  remarks?: string;\n  document_url?: string;\n  created_by: string;\n  created_at: string;\n}\n\nexport interface Ticket {\n  id: string;\n  batch_id: string;\n  status: \"available\" | \"booked\" | \"locked\" | \"sold\";\n  selling_price: number;\n  passenger_info?: any;\n  sold_by?: string;\n  sold_at?: string;\n  locked_until?: string;\n  booking_id?: string;\n  created_at: string;\n}\n\nexport class TicketRepository {\n  static async createBatch(batchData: Omit<TicketBatch, \"id\" | \"created_at\">): Promise<TicketBatch> {\n    const id = uuidv4();\n    const now = new Date().toISOString();\n\n    const result = await query(\n      `INSERT INTO ticket_batches (id, country_code, airline, flight_date, flight_time, buying_price, quantity, agent_name, agent_contact, agent_address, remarks, document_url, created_by, created_at)\n       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) RETURNING *`,\n      [\n        id,\n        batchData.country_code,\n        batchData.airline,\n        batchData.flight_date,\n        batchData.flight_time,\n        batchData.buying_price,\n        batchData.quantity,\n        batchData.agent_name,\n        batchData.agent_contact,\n        batchData.agent_address,\n        batchData.remarks,\n        batchData.document_url,\n        batchData.created_by,\n        now,\n      ]\n    );\n\n    // Create individual tickets for this batch\n    const batch = result.rows[0] as TicketBatch;\n    const ticketPromises = [];\n    for (let i = 0; i < batch.quantity; i++) {\n      ticketPromises.push(this.createTicket({\n        batch_id: batch.id,\n        selling_price: batch.buying_price * 1.1, // Default 10% markup\n        status: \"available\",\n      }));\n    }\n    await Promise.all(ticketPromises);\n\n    return batch;\n  }\n\n  static async createTicket(ticketData: Omit<Ticket, \"id\" | \"created_at\">): Promise<Ticket> {\n    const id = uuidv4();\n    const now = new Date().toISOString();\n\n    const result = await query(\n      `INSERT INTO tickets (id, batch_id, status, selling_price, passenger_info, sold_by, sold_at, locked_until, booking_id, created_at)\n       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *`,\n      [\n        id,\n        ticketData.batch_id,\n        ticketData.status,\n        ticketData.selling_price,\n        ticketData.passenger_info,\n        ticketData.sold_by,\n        ticketData.sold_at,\n        ticketData.locked_until,\n        ticketData.booking_id,\n        now,\n      ]\n    );\n\n    return result.rows[0] as Ticket;\n  }\n\n  static async findBatchById(id: string): Promise<TicketBatch | undefined> {\n    const result = await query(\"SELECT * FROM ticket_batches WHERE id = $1\", [id]);\n    return result.rows[0] as TicketBatch;\n  }\n\n  static async findTicketById(id: string): Promise<Ticket | undefined> {\n    const result = await query(\"SELECT * FROM tickets WHERE id = $1\", [id]);\n    return result.rows[0] as Ticket;\n  }\n\n  static async findTicketsByBatchId(batchId: string): Promise<Ticket[]> {\n    const result = await query(\"SELECT * FROM tickets WHERE batch_id = $1 ORDER BY created_at\", [batchId]);\n    return result.rows as Ticket[];\n  }\n\n  static async findAvailableTicketsByCountry(countryCode: string): Promise<(Ticket & { batch: TicketBatch })[]> {\n    const result = await query(\n      `SELECT t.*, tb.* FROM tickets t\n       JOIN ticket_batches tb ON t.batch_id = tb.id\n       WHERE tb.country_code = $1 AND t.status = 'available'\n       ORDER BY tb.flight_date, t.created_at`,\n      [countryCode]\n    );\n    \n    return result.rows.map(row => ({\n      id: row.id,\n      batch_id: row.batch_id,\n      status: row.status,\n      selling_price: row.selling_price,\n      passenger_info: row.passenger_info,\n      sold_by: row.sold_by,\n      sold_at: row.sold_at,\n      locked_until: row.locked_until,\n      booking_id: row.booking_id,\n      created_at: row.created_at,\n      batch: {\n        id: row.id,\n        country_code: row.country_code,\n        airline: row.airline,\n        flight_date: row.flight_date,\n        flight_time: row.flight_time,\n        buying_price: row.buying_price,\n        quantity: row.quantity,\n        agent_name: row.agent_name,\n        agent_contact: row.agent_contact,\n        agent_address: row.agent_address,\n        remarks: row.remarks,\n        document_url: row.document_url,\n        created_by: row.created_by,\n        created_at: row.created_at,\n      }\n    })) as (Ticket & { batch: TicketBatch })[];\n  }\n\n  static async lockTicket(ticketId: string, userId: string, minutes: number): Promise<Ticket> {\n    const lockUntil = new Date(Date.now() + minutes * 60000).toISOString();\n    \n    const result = await query(\n      \"UPDATE tickets SET status = 'locked', locked_until = $1, sold_by = $2 WHERE id = $3 RETURNING *\",\n      [lockUntil, userId, ticketId]\n    );\n    \n    return result.rows[0] as Ticket;\n  }\n\n  static async unlockExpiredTickets(): Promise<void> {\n    await query(\n      \"UPDATE tickets SET status = 'available', locked_until = NULL, sold_by = NULL WHERE status = 'locked' AND locked_until < NOW()\"\n    );\n  }\n}\n\n// Booking model\nexport interface Booking {\n  id: string;\n  ticket_id: string;\n  agent_info: any;\n  passenger_info: any;\n  selling_price: number;\n  payment_type: \"full\" | \"partial\";\n  comments?: string;\n  created_by: string;\n  created_at: string;\n  confirmed_at?: string;\n  expires_at: string;\n}\n\nexport class BookingRepository {\n  static async create(bookingData: Omit<Booking, \"id\" | \"created_at\">): Promise<Booking> {\n    const id = uuidv4();\n    const now = new Date().toISOString();\n\n    const result = await query(\n      `INSERT INTO bookings (id, ticket_id, agent_info, passenger_info, selling_price, payment_type, comments, created_by, created_at, expires_at)\n       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *`,\n      [\n        id,\n        bookingData.ticket_id,\n        bookingData.agent_info,\n        bookingData.passenger_info,\n        bookingData.selling_price,\n        bookingData.payment_type,\n        bookingData.comments,\n        bookingData.created_by,\n        now,\n        bookingData.expires_at,\n      ]\n    );\n\n    return result.rows[0] as Booking;\n  }\n\n  static async findById(id: string): Promise<Booking | undefined> {\n    const result = await query(\"SELECT * FROM bookings WHERE id = $1\", [id]);\n    return result.rows[0] as Booking;\n  }\n\n  static async findByTicketId(ticketId: string): Promise<Booking | undefined> {\n    const result = await query(\"SELECT * FROM bookings WHERE ticket_id = $1\", [ticketId]);\n    return result.rows[0] as Booking;\n  }\n\n  static async confirm(bookingId: string, userId: string): Promise<Booking> {\n    const now = new Date().toISOString();\n    \n    const result = await query(\n      \"UPDATE bookings SET confirmed_at = $1 WHERE id = $2 RETURNING *\",\n      [now, bookingId]\n    );\n    \n    return result.rows[0] as Booking;\n  }\n}\n\n// Activity log model\nexport interface ActivityLog {\n  id: string;\n  user_id: string;\n  action: string;\n  entity_type: string;\n  entity_id?: string;\n  details?: any;\n  ip_address?: string;\n  user_agent?: string;\n  created_at: string;\n}\n\nexport class ActivityLogRepository {\n  static async create(logData: Omit<ActivityLog, \"id\" | \"created_at\">): Promise<ActivityLog> {\n    const id = uuidv4();\n    const now = new Date().toISOString();\n\n    const result = await query(\n      `INSERT INTO activity_logs (id, user_id, action, entity_type, entity_id, details, ip_address, user_agent, created_at)\n       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING *`,\n      [\n        id,\n        logData.user_id,\n        logData.action,\n        logData.entity_type,\n        logData.entity_id,\n        logData.details,\n        logData.ip_address,\n        logData.user_agent,\n        now,\n      ]\n    );\n\n    return result.rows[0] as ActivityLog;\n  }\n}","import { RequestHandler } from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { UserRepository } from \"../database/models\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"bd_ticket_pro_secret\";\nconst TOKEN_EXPIRY = \"7d\";\n\nexport function generateToken(user: any) {\n  const payload = { id: user.id, username: user.username, role: user.role };\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: TOKEN_EXPIRY });\n}\n\nexport const authenticate: RequestHandler = async (req: any, res: any, next: any) => {\n  try {\n    const authHeader = req.get(\"Authorization\") || req.get(\"authorization\");\n    if (!authHeader) return res.status(401).json({ success: false, message: \"Authorization header missing\" });\n\n    const parts = authHeader.split(\" \");\n    if (parts.length !== 2 || parts[0] !== \"Bearer\") return res.status(401).json({ success: false, message: \"Invalid authorization header\" });\n\n    const token = parts[1];\n    let decoded: any;\n    try {\n      decoded = jwt.verify(token, JWT_SECRET) as any;\n    } catch (err) {\n      return res.status(401).json({ success: false, message: \"Invalid or expired token\" });\n    }\n\n    if (!decoded || !decoded.id) return res.status(401).json({ success: false, message: \"Invalid token payload\" });\n\n    const user = await UserRepository.findById(decoded.id);\n    if (!user) return res.status(401).json({ success: false, message: \"User not found\" });\n\n    // Attach user to request\n    req.user = user;\n    next();\n  } catch (error) {\n    console.error(\"Authentication error:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n};\n\nexport default { generateToken, authenticate };\n","import { Router, Request, Response } from \"express\";\nimport { UserRepository, ActivityLogRepository } from \"../database/models\";\nimport { generateToken, authenticate } from \"../middleware/auth\";\nimport { z } from \"zod\";\n\nconst router = Router();\n\n// Login schema validation\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\n// Login endpoint\nrouter.post(\"/login\", async (req: Request, res: Response) => {\n  try {\n    const { username, password } = loginSchema.parse(req.body);\n\n    // Find user by username\n    const user = await UserRepository.findByUsername(username);\n    if (!user) {\n      return res.status(401).json({\n        success: false,\n        message: \"Invalid username or password\",\n      });\n    }\n\n    // Check if user is active\n    if (user.status !== \"active\") {\n      return res.status(401).json({\n        success: false,\n        message: \"Account is inactive\",\n      });\n    }\n\n    // Verify password\n    if (!UserRepository.verifyPassword(password, user.password_hash!)) {\n      return res.status(401).json({\n        success: false,\n        message: \"Invalid username or password\",\n      });\n    }\n\n    // Update last login\n    await UserRepository.updateLastLogin(user.id);\n\n    // Log activity\n    await ActivityLogRepository.create({\n      user_id: user.id,\n      action: \"login\",\n      entity_type: \"auth\",\n      ip_address: req.ip || req.connection.remoteAddress,\n      user_agent: req.get(\"User-Agent\"),\n    });\n\n    // Generate JWT token\n    const token = generateToken(user);\n\n    // Remove password hash from response\n    delete (user as any).password_hash;\n\n    res.json({\n      success: true,\n      message: \"Login successful\",\n      data: {\n        user,\n        token,\n      },\n    });\n  } catch (error) {\n    console.error(\"Login error:\", error);\n\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        success: false,\n        message: \"Validation error\",\n        errors: error.errors,\n      });\n    }\n\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n});\n\n// Get current user profile\nrouter.get(\"/me\", authenticate, async (req: Request, res: Response) => {\n  try {\n    // User is already verified by authenticate middleware\n    const user = req.user!;\n\n    res.json({\n      success: true,\n      message: \"User profile retrieved\",\n      data: user,\n    });\n  } catch (error) {\n    console.error(\"Get profile error:\", error);\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  }\n});\n\nexport default router;","import { Router, Request, Response } from \"express\";\nimport { TicketRepository } from \"../database/models\";\nimport { query } from \"../database/schema\";\n\nconst router = Router();\n\n// Dashboard stats (lightweight)\nrouter.get(\"/dashboard/stats\", async (_req: Request, res: Response) => {\n  try {\n    const result = await query(`SELECT\n      (SELECT COUNT(*) FROM tickets) AS total_tickets,\n      (SELECT COUNT(*) FROM bookings) AS total_bookings,\n      (SELECT COUNT(*) FROM tickets WHERE status = 'locked') AS locked_tickets\n    `);\n\n    const row = result.rows[0] || { total_tickets: 0, total_bookings: 0, locked_tickets: 0 };\n\n    res.json({ success: true, data: {\n      totalInventory: Number(row.total_tickets || 0),\n      totalBookings: Number(row.total_bookings || 0),\n      lockedTickets: Number(row.locked_tickets || 0),\n    }});\n  } catch (error) {\n    console.error(\"Error fetching dashboard stats:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\n// Countries stats (basic)\nrouter.get(\"/countries/stats\", async (_req: Request, res: Response) => {\n  try {\n    const result = await query(`SELECT c.code, c.name, COUNT(t.id) AS available_tickets\n      FROM countries c\n      LEFT JOIN ticket_batches tb ON tb.country_id = c.id\n      LEFT JOIN tickets t ON t.batch_id = tb.id AND t.status = 'available'\n      GROUP BY c.code, c.name ORDER BY c.name`);\n\n    res.json({ success: true, data: result.rows || [] });\n  } catch (error) {\n    console.error(\"Error fetching countries stats:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\n// Get tickets with optional filters\nrouter.get(\"/\", async (req: Request, res: Response) => {\n  try {\n    const { country, status, airline, limit = 50, offset = 0 } = req.query as any;\n\n    if (country) {\n      const tickets = await TicketRepository.findAvailableTicketsByCountry(country);\n      return res.json({ success: true, data: { tickets, total: tickets.length } });\n    }\n\n    // Fallback: return recent tickets\n    const q = `SELECT t.*, tb.* FROM tickets t JOIN ticket_batches tb ON t.batch_id = tb.id ORDER BY t.created_at DESC LIMIT $1 OFFSET $2`;\n    const result = await query(q, [Number(limit), Number(offset)]);\n\n    const tickets = result.rows.map((row: any) => ({\n      id: row.id,\n      batch_id: row.batch_id,\n      status: row.status,\n      selling_price: row.selling_price,\n      created_at: row.created_at,\n      batch: {\n        id: row.id,\n        country_id: row.country_id,\n        airline_id: row.airline_id,\n        flight_date: row.flight_date,\n        flight_time: row.flight_time,\n        buying_price: row.buying_price,\n        quantity: row.quantity,\n        agent_name: row.agent_name,\n        remarks: row.remarks,\n        created_at: row.created_at,\n      },\n    }));\n\n    res.json({ success: true, data: { tickets, total: tickets.length } });\n  } catch (error) {\n    console.error(\"Error fetching tickets:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\n// Get tickets by country\nrouter.get(\"/country/:code\", async (req: Request, res: Response) => {\n  try {\n    const { code } = req.params;\n    const tickets = await TicketRepository.findAvailableTicketsByCountry(code);\n    res.json({ success: true, data: { tickets, total: tickets.length } });\n  } catch (error) {\n    console.error(\"Error fetching tickets by country:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\n// Get all tickets (administrative)\nrouter.get(\"/all\", async (req: Request, res: Response) => {\n  try {\n    const { limit = 100, offset = 0 } = req.query as any;\n    const q = `SELECT t.*, tb.* FROM tickets t JOIN ticket_batches tb ON t.batch_id = tb.id ORDER BY t.created_at DESC LIMIT $1 OFFSET $2`;\n    const result = await query(q, [Number(limit), Number(offset)]);\n    res.json({ success: true, data: { tickets: result.rows, total: result.rowCount } });\n  } catch (error) {\n    console.error(\"Error fetching all tickets:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\n// Get ticket by id\nrouter.get(\"/:id\", async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const ticket = await TicketRepository.findTicketById(id);\n    if (!ticket) return res.status(404).json({ success: false, message: \"Ticket not found\" });\n    res.json({ success: true, data: { ticket } });\n  } catch (error) {\n    console.error(\"Error fetching ticket:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\n// Update ticket status\nrouter.patch(\"/:id/status\", async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.body;\n    if (!status) return res.status(400).json({ success: false, message: \"Status is required\" });\n\n    const result = await query(\"UPDATE tickets SET status = $1, updated_at = NOW() WHERE id = $2 RETURNING *\", [status, id]);\n    if (!result.rowCount) return res.status(404).json({ success: false, message: \"Ticket not found\" });\n\n    res.json({ success: true, message: \"Status updated\", data: { ticket: result.rows[0] } });\n  } catch (error) {\n    console.error(\"Error updating ticket status:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\nexport default router;\n","import { Router, Request, Response } from \"express\";\nimport { TicketRepository } from \"../database/models\";\n\nconst router = Router();\n\n// Get ticket batches\nrouter.get(\"/\", async (req: Request, res: Response) => {\n  try {\n    const { country, airline, dateFrom, dateTo, limit = 50, offset = 0 } = req.query as any;\n\n    // Simple listing from DB\n    const q = `SELECT tb.* FROM ticket_batches tb WHERE 1=1\n      ${country ? \"AND tb.country_id = (SELECT id FROM countries WHERE code = $3)\" : \"\"}\n      ORDER BY tb.created_at DESC LIMIT $1 OFFSET $2`;\n\n    // If country filter is provided we perform a parameterized query; otherwise basic query\n    if (country) {\n      const result = await (await import(\"../database/schema\")).query(`SELECT tb.* FROM ticket_batches tb JOIN countries c ON tb.country_id = c.id WHERE c.code = $1 ORDER BY tb.created_at DESC LIMIT $2 OFFSET $3`, [country, Number(limit), Number(offset)]);\n      return res.json({ success: true, data: result.rows });\n    }\n\n    const result = await (await import(\"../database/schema\")).query(`SELECT tb.* FROM ticket_batches tb ORDER BY tb.created_at DESC LIMIT $1 OFFSET $2`, [Number(limit), Number(offset)]);\n    res.json({ success: true, data: result.rows });\n  } catch (error) {\n    console.error(\"Error fetching ticket batches:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\n// Create ticket batch\nrouter.post(\"/\", async (req: Request, res: Response) => {\n  try {\n    const batchData = req.body;\n    const batch = await TicketRepository.createBatch(batchData);\n    res.json({ success: true, data: batch });\n  } catch (error) {\n    console.error(\"Error creating ticket batch:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\nexport default router;\n","import { Router, Request, Response } from \"express\";\nimport { BookingRepository } from \"../database/models\";\n\nconst router = Router();\n\n// Get bookings\nrouter.get(\"/\", async (req: Request, res: Response) => {\n  try {\n    const { status, limit = 50, offset = 0 } = req.query as any;\n    // Basic listing\n    const result = await (await import(\"../database/schema\")).query(`SELECT b.* FROM bookings b ORDER BY b.created_at DESC LIMIT $1 OFFSET $2`, [Number(limit), Number(offset)]);\n    res.json({ success: true, data: { bookings: result.rows, total: result.rowCount } });\n  } catch (error) {\n    console.error(\"Error fetching bookings:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\n// Create booking\nrouter.post(\"/\", async (req: Request, res: Response) => {\n  try {\n    const bookingData = req.body;\n    const booking = await BookingRepository.create(bookingData);\n    res.json({ success: true, data: booking });\n  } catch (error) {\n    console.error(\"Error creating booking:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\n// Update booking status\nrouter.patch(\"/:id/status\", async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.body;\n    if (!status) return res.status(400).json({ success: false, message: \"Status is required\" });\n\n    const result = await (await import(\"../database/schema\")).query(\"UPDATE bookings SET status = $1, updated_at = NOW() WHERE id = $2 RETURNING *\", [status, id]);\n    if (!result.rowCount) return res.status(404).json({ success: false, message: \"Booking not found\" });\n\n    res.json({ success: true, message: \"Status updated\", data: { booking: result.rows[0] } });\n  } catch (error) {\n    console.error(\"Error updating booking status:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\n// Cancel booking\nrouter.delete(\"/:id\", async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const result = await (await import(\"../database/schema\")).query(\"DELETE FROM bookings WHERE id = $1 RETURNING *\", [id]);\n    if (!result.rowCount) return res.status(404).json({ success: false, message: \"Booking not found\" });\n    res.json({ success: true, message: \"Booking cancelled\" });\n  } catch (error) {\n    console.error(\"Error cancelling booking:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\nexport default router;\n","import { Router, Request, Response } from \"express\";\nimport { UserRepository } from \"../database/models\";\n\nconst router = Router();\n\n// List users\nrouter.get(\"/\", async (_req: Request, res: Response) => {\n  try {\n    const users = await UserRepository.findAll();\n    res.json({ success: true, data: users });\n  } catch (error) {\n    console.error(\"Error fetching users:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\n// Create user (admin)\nrouter.post(\"/\", async (req: Request, res: Response) => {\n  try {\n    const { username, password, name, email, phone, role = \"staff\", status = \"active\" } = req.body;\n    const user = await UserRepository.create({ username, password, name, email, phone, role, status });\n    res.json({ success: true, data: user });\n  } catch (error) {\n    console.error(\"Error creating user:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\nexport default router;\n","import { Router, Request, Response } from \"express\";\nimport { getSetting, setSetting } from \"../database/schema\";\n\nconst router = Router();\n\nrouter.get(\"/\", async (req: Request, res: Response) => {\n  try {\n    const { key } = req.query as any;\n    if (key) {\n      const value = await getSetting(key);\n      return res.json({ success: true, data: { [key]: value } });\n    }\n\n    const result = await (await import(\"../database/schema\")).query(\"SELECT setting_key, setting_value FROM settings ORDER BY setting_key\");\n    const data = result.rows.reduce((acc: any, row: any) => ((acc[row.setting_key] = row.setting_value), acc), {});\n    res.json({ success: true, data });\n  } catch (error) {\n    console.error(\"Error fetching settings:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\nrouter.post(\"/\", async (req: Request, res: Response) => {\n  try {\n    const { key, value } = req.body;\n    if (!key) return res.status(400).json({ success: false, message: \"Key is required\" });\n    const setting = await setSetting(key, String(value));\n    res.json({ success: true, data: setting });\n  } catch (error) {\n    console.error(\"Error setting setting:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\nexport default router;\n","import { Router, Request, Response } from \"express\";\nimport { query } from \"../database/schema\";\n\nconst router = Router();\n\n// Get umrah group tickets\nrouter.get(\"/group-tickets\", async (req: Request, res: Response) => {\n  try {\n    const { packageType, limit = 50, offset = 0 } = req.query as any;\n    const q = `SELECT g.*, p.name as package_name FROM umrah_group_tickets g JOIN umrah_packages p ON g.package_id = p.id ORDER BY g.created_at DESC LIMIT $1 OFFSET $2`;\n    const result = await query(q, [Number(limit), Number(offset)]);\n    res.json({ success: true, data: result.rows });\n  } catch (error) {\n    console.error(\"Error fetching umrah group tickets:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\n// Create umrah group ticket\nrouter.post(\"/group-tickets\", async (req: Request, res: Response) => {\n  try {\n    const { package_id, ticket_count } = req.body;\n    const result = await query(`INSERT INTO umrah_group_tickets (package_id, ticket_count, available_count, sold_count) VALUES ($1, $2, $2, 0) RETURNING *`, [package_id, ticket_count]);\n    res.json({ success: true, data: result.rows[0] });\n  } catch (error) {\n    console.error(\"Error creating umrah group ticket:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\nexport default router;\n","import express from \"express\";\nimport cors from \"cors\";\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\nimport { initializeDatabase } from \"./database/schema\";\n\n// Import API routes\nimport authRoutes from \"./routes/auth\";\nimport ticketRoutes from \"./routes/tickets\";\nimport ticketBatchRoutes from \"./routes/ticket-batches\";\nimport bookingRoutes from \"./routes/bookings\";\nimport userRoutes from \"./routes/users\";\nimport settingsRoutes from \"./routes/settings\";\nimport umrahRoutes from \"./routes/umrah\";\n\nexport async function createServer() {\n  const app = express();\n\n  // Initialize database\n  try {\n    await initializeDatabase();\n    console.log(\"Database initialized successfully\");\n  } catch (error) {\n    console.error(\"Database initialization error:\", error);\n  }\n\n  // Middleware\n  app.use(\n    cors({\n      origin:\n        process.env.NODE_ENV === \"production\"\n          ? [process.env.FRONTEND_URL || \"\"] // Add your production frontend URL\n          : [\"http://localhost:3000\", \"http://localhost:5173\", \"http://localhost:8080\"],\n      credentials: true,\n    }),\n  );\n\n  app.use(express.json({ limit: \"10mb\" }));\n  app.use(express.urlencoded({ extended: true, limit: \"10mb\" }));\n\n  // Add request logging middleware\n  app.use((req, res, next) => {\n    console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);\n    next();\n  });\n\n  // Health check endpoint\n  app.get(\"/api/ping\", (_req, res) => {\n    res.json({\n      message: \"BD TicketPro API Server\",\n      status: \"healthy\",\n      timestamp: new Date().toISOString(),\n    });\n  });\n\n  // API Routes\n  app.use(\"/api/auth\", authRoutes);\n  app.use(\"/api/tickets\", ticketRoutes);\n  app.use(\"/api/batches\", ticketBatchRoutes);\n  app.use(\"/api/bookings\", bookingRoutes);\n  app.use(\"/api/users\", userRoutes);\n  app.use(\"/api/settings\", settingsRoutes);\n  app.use(\"/api/umrah\", umrahRoutes);\n\n  // Serve static files in production\n  if (process.env.NODE_ENV === \"production\") {\n    const __filename = fileURLToPath(import.meta.url);\n    const __dirname = path.dirname(__filename);\n    const frontendPath = path.join(__dirname, \"..\", \"dist\", \"spa\");\n    \n    // Serve static files\n    app.use(express.static(frontendPath));\n    \n    // Handle React Router\n    app.get(\"*\", (req, res) => {\n      if (req.path.startsWith(\"/api/\")) {\n        return res.status(404).json({ error: \"API endpoint not found\" });\n      }\n      res.sendFile(path.join(frontendPath, \"index.html\"));\n    });\n  }\n\n  // 404 handler\n  app.use((_req, res) => {\n    res.status(404).json({\n      success: false,\n      message: \"API endpoint not found\",\n    });\n  });\n\n  // Global error handler\n  app.use((err: any, _req: any, res: any, _next: any) => {\n    console.error(\"Unhandled error:\", err);\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n    });\n  });\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nasync function startServer() {\n  const app = await createServer();\n  const port = process.env.PORT || 3000;\n\n  // In production, serve the built SPA files\n  const __dirname = import.meta.dirname;\n  const distPath = path.join(__dirname, \"../spa\");\n\n  // Serve static files\n  app.use(express.static(distPath));\n\n  // Handle React Router - serve index.html for all non-API routes\n  app.get(\"*\", (req, res) => {\n    // Don't serve index.html for API routes\n    if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n      return res.status(404).json({ error: \"API endpoint not found\" });\n    }\n\n    res.sendFile(path.join(distPath, \"index.html\"));\n  });\n\n  app.listen(port, () => {\n    console.log(`🚀 BD TicketPro server running on port ${port}`);\n    console.log(`📱 Frontend: http://localhost:${port}`);\n    console.log(`🔧 API: http://localhost:${port}/api`);\n  });\n\n  // Graceful shutdown\n  process.on(\"SIGTERM\", () => {\n    console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n    process.exit(0);\n  });\n\n  process.on(\"SIGINT\", () => {\n    console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n    process.exit(0);\n  });\n}\n\nstartServer().catch(error => {\n  console.error(\"Failed to start server:\", error);\n  process.exit(1);\n});"],"names":["uuidv4","router","tickets","result","express","authRoutes","ticketRoutes","ticketBatchRoutes","bookingRoutes","userRoutes","settingsRoutes","umrahRoutes"],"mappings":"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"}