// Comprehensive validation utilities for BD TicketPro
// ‡¶ü‡¶ø‡¶ï‡ßá‡¶ü ‡¶ï‡ßç‡¶∞‡¶Ø‡¶º ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶® utilities

export interface ValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
}

export interface FinancialCalculation {
  totalCost: number;
  estimatedSellingPrice: number;
  estimatedRevenue: number;
  estimatedProfit: number;
  profitMargin: string;
  riskLevel: "low" | "medium" | "high";
}

// üîç Phone Number Validation for Bangladesh
export const validateBangladeshiPhone = (phone: string): boolean => {
  const cleanPhone = phone.replace(/[\s-]/g, "");
  const phoneRegex = /^(\+880|880|0)?(1[3-9]\d{8})$/;
  return phoneRegex.test(cleanPhone);
};

// üìß Email Validation
export const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// üí≥ Passport Number Validation (Bangladesh)
export const validatePassportNumber = (passport: string): boolean => {
  // Bangladesh passport: 2 letters followed by 7 digits
  const passportRegex = /^[A-Z]{2}\d{7}$/;
  return passportRegex.test(passport.toUpperCase());
};

// üí∞ Price Validation
export const validatePrice = (
  price: number,
  min: number = 1000,
  max: number = 500000,
): ValidationResult => {
  const errors: string[] = [];

  if (!price || price <= 0) {
    errors.push("‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø ‡ß¶ ‡¶è‡¶∞ ‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá / Price must be greater than 0");
  } else if (price < min) {
    errors.push(
      `‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß≥${min.toLocaleString()} ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá / Price must be at least ‡ß≥${min.toLocaleString()}`,
    );
  } else if (price > max) {
    errors.push(
      `‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡ß≥${max.toLocaleString()} ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá / Price cannot exceed ‡ß≥${max.toLocaleString()}`,
    );
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings: [],
  };
};

// üìÖ Date Validation
export const validateFlightDate = (dateString: string): ValidationResult => {
  const errors: string[] = [];
  const warnings: string[] = [];

  if (!dateString) {
    errors.push("‡¶´‡ßç‡¶≤‡¶æ‡¶á‡¶ü‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï / Flight date is required");
    return { isValid: false, errors, warnings };
  }

  const flightDate = new Date(dateString);
  const today = new Date();
  const maxDate = new Date();
  maxDate.setFullYear(today.getFullYear() + 1);

  // Set time to start of day for comparison
  today.setHours(0, 0, 0, 0);
  flightDate.setHours(0, 0, 0, 0);

  if (flightDate < today) {
    errors.push("‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡¶§‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® / Please select a future date");
  } else if (flightDate > maxDate) {
    errors.push(
      "‡ßß ‡¶¨‡¶õ‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® / Please select date within 1 year",
    );
  }

  // Warning for very close dates
  const threeDaysLater = new Date();
  threeDaysLater.setDate(today.getDate() + 3);
  if (flightDate <= threeDaysLater) {
    warnings.push(
      "‡¶ñ‡ßÅ‡¶¨ ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶´‡ßç‡¶≤‡¶æ‡¶á‡¶ü - ‡¶§‡¶æ‡¶°‡¶º‡¶æ‡¶π‡ßÅ‡¶°‡¶º‡ßã ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® / Very soon flight - rush sale required",
    );
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings,
  };
};

// üïí Time Validation
export const validateFlightTime = (timeString: string): ValidationResult => {
  const errors: string[] = [];

  if (!timeString) {
    errors.push("‡¶´‡ßç‡¶≤‡¶æ‡¶á‡¶ü‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï / Flight time is required");
  } else {
    const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
    if (!timeRegex.test(timeString)) {
      errors.push(
        "‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® (HH:MM) / Please use correct time format (HH:MM)",
      );
    }
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings: [],
  };
};

// üé´ Quantity Validation
export const validateTicketQuantity = (
  quantity: number,
  maxQuantity: number = 1000,
): ValidationResult => {
  const errors: string[] = [];
  const warnings: string[] = [];

  if (!quantity || quantity <= 0) {
    errors.push(
      "‡¶ü‡¶ø‡¶ï‡ßá‡¶ü‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡ß¶ ‡¶è‡¶∞ ‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá / Quantity must be greater than 0",
    );
  } else if (quantity > maxQuantity) {
    errors.push(
      `‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡ßá ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ${maxQuantity} ‡¶ü‡¶ø‡¶ï‡ßá‡¶ü ‡¶ï‡ßç‡¶∞‡¶Ø‡¶º ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá / Maximum ${maxQuantity} tickets can be purchased at once`,
    );
  }

  if (quantity > 500) {
    warnings.push(
      "‡¶¨‡¶°‡¶º ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£‡ßá‡¶∞ ‡¶ü‡¶ø‡¶ï‡ßá‡¶ü - ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º ‡¶™‡¶∞‡¶ø‡¶ï‡¶≤‡ßç‡¶™‡¶®‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® / Large quantity - ensure sales plan",
    );
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings,
  };
};

// üè¢ Agent Information Validation
export const validateAgentInfo = (
  name: string,
  contact: string,
  address?: string,
): ValidationResult => {
  const errors: string[] = [];

  if (!name || name.trim().length < 3) {
    errors.push(
      "‡¶è‡¶ú‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß© ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá / Agent name must be at least 3 characters",
    );
  }

  if (!contact || !validateBangladeshiPhone(contact)) {
    errors.push(
      "‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡¶ø ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶® / Please provide valid Bangladeshi mobile number",
    );
  }

  if (address && address.trim().length > 0 && address.trim().length < 10) {
    errors.push(
      "‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ßß‡ß¶ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá / Address must be at least 10 characters",
    );
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings: [],
  };
};

// üí∞ Financial Calculation and Risk Assessment
export const calculateFinancials = (
  buyingPrice: number,
  quantity: number,
  markupPercentage: number = 20,
): FinancialCalculation => {
  const totalCost = buyingPrice * quantity;
  const estimatedSellingPrice = Math.round(
    buyingPrice * (1 + markupPercentage / 100),
  );
  const estimatedRevenue = estimatedSellingPrice * quantity;
  const estimatedProfit = estimatedRevenue - totalCost;
  const profitMargin =
    totalCost > 0 ? ((estimatedProfit / totalCost) * 100).toFixed(1) : "0";

  // Risk assessment
  let riskLevel: "low" | "medium" | "high" = "low";

  if (totalCost > 5000000 || parseFloat(profitMargin) < 10 || quantity > 500) {
    riskLevel = "high";
  } else if (
    totalCost > 1000000 ||
    parseFloat(profitMargin) < 15 ||
    quantity > 200
  ) {
    riskLevel = "medium";
  }

  return {
    totalCost,
    estimatedSellingPrice,
    estimatedRevenue,
    estimatedProfit,
    profitMargin,
    riskLevel,
  };
};

// ‚úàÔ∏è Passenger Count Validation (1 Passenger = 1 Ticket Rule)
export const validatePassengerCount = (paxCount: number): ValidationResult => {
  const errors: string[] = [];

  if (paxCount !== 1) {
    errors.push(
      `‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶≤‡¶ô‡ßç‡¶ò‡¶®: ‡ßß ‡¶ú‡¶® ‡¶Ø‡¶æ‡¶§‡ßçÔøΩÔøΩ‡ßÄ = ‡ßß ‡¶ü‡¶ø ‡¶ü‡¶ø‡¶ï‡ßá‡¶ü‡•§ ${paxCount} ‡¶ú‡¶® ‡¶Ø‡¶æ‡¶§‡ßç‡¶∞‡ßÄ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ${paxCount} ‡¶ü‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ü‡¶ø‡¶ï‡ßá‡¶ü ‡¶¨‡ßÅ‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶® / Rule violation: 1 Passenger = 1 Ticket. Please book ${paxCount} separate tickets for ${paxCount} passengers`,
    );
  }

  return {
    isValid: errors.length === 0,
    errors,
    data: { paxCount: 1 }, // Always enforce 1 passenger
  };
};

// üîÑ Booking Status Validation
export const validateStatusTransition = (
  currentStatus: string,
  newStatus: string,
): ValidationResult => {
  const errors: string[] = [];

  const validTransitions: Record<string, string[]> = {
    pending: ["confirmed", "cancelled", "expired"],
    confirmed: ["cancelled"], // Can only cancel confirmed bookings
    cancelled: [], // Cannot change cancelled bookings
    expired: [], // Cannot change expired bookings
  };

  if (!validTransitions[currentStatus]?.includes(newStatus)) {
    errors.push(
      `‡¶Ö‡¶¨‡ßà‡¶ß ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®: ${currentStatus} ‡¶•‡ßá‡¶ï‡ßá ${newStatus} ‡¶è ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ / Invalid status transition: Cannot change from ${currentStatus} to ${newStatus}`,
    );
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings: [],
  };
};

// üé≠ Passenger Information Validation
export const validatePassengerInfo = (
  name: string,
  passport: string,
  phone: string,
  email?: string,
): ValidationResult => {
  const errors: string[] = [];

  if (!name || name.trim().length < 2) {
    errors.push(
      "‡¶Ø‡¶æ‡¶§‡ßç‡¶∞‡ßÄ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß® ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá / Passenger name must be at least 2 characters",
    );
  }

  if (!passport || !validatePassportNumber(passport)) {
    errors.push(
      "‡¶∏‡¶†‡¶ø‡¶ï ‡¶™‡¶æ‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: AB1234567) / Please provide valid passport number (e.g., AB1234567)",
    );
  }

  if (!phone || !validateBangladeshiPhone(phone)) {
    errors.push(
      "‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡¶ø ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶® / Please provide valid Bangladeshi mobile number",
    );
  }

  if (email && !validateEmail(email)) {
    errors.push("‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶¶‡¶ø‡¶® / Please provide valid email address");
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings: [],
  };
};

// üéØ Complete Ticket Batch Validation
export const validateTicketBatch = (batchData: {
  country: string;
  airline: string;
  flightDate: string;
  flightTime: string;
  buyingPrice: number;
  quantity: number;
  agentName: string;
  agentContact: string;
  agentAddress?: string;
}): ValidationResult => {
  const allErrors: string[] = [];
  const allWarnings: string[] = [];

  // Required field validation
  if (!batchData.country)
    allErrors.push("‡¶¶‡ßá‡¶∂ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï / Country selection is required");
  if (!batchData.airline)
    allErrors.push(
      "‡¶è‡¶Ø‡¶º‡¶æ‡¶∞‡¶≤‡¶æ‡¶á‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï / Airline selection is required",
    );

  // Date validation
  const dateValidation = validateFlightDate(batchData.flightDate);
  allErrors.push(...dateValidation.errors);
  allWarnings.push(...dateValidation.warnings);

  // Time validation
  const timeValidation = validateFlightTime(batchData.flightTime);
  allErrors.push(...timeValidation.errors);

  // Price validation
  const priceValidation = validatePrice(batchData.buyingPrice);
  allErrors.push(...priceValidation.errors);

  // Quantity validation
  const quantityValidation = validateTicketQuantity(batchData.quantity);
  allErrors.push(...quantityValidation.errors);
  allWarnings.push(...quantityValidation.warnings);

  // Agent validation
  const agentValidation = validateAgentInfo(
    batchData.agentName,
    batchData.agentContact,
    batchData.agentAddress,
  );
  allErrors.push(...agentValidation.errors);

  // Financial validation
  const totalCost = batchData.buyingPrice * batchData.quantity;
  if (totalCost > 50000000) {
    // 5 crore limit
    allErrors.push(
      "‡¶Æ‡ßã‡¶ü ‡¶ñ‡¶∞‡¶ö ‡ß´ ‡¶ï‡ßã‡¶ü‡¶ø ‡¶ü‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶®‡¶æ / Total cost cannot exceed ‡ß≥5 crore",
    );
  }

  return {
    isValid: allErrors.length === 0,
    errors: allErrors,
    warnings: allWarnings,
  };
};

// üìã Audit Log Generator
export const generateAuditLog = (
  action: string,
  data: any,
  user: any,
): string => {
  const timestamp = new Date().toLocaleString("bn-BD", {
    timeZone: "Asia/Dhaka",
    dateStyle: "full",
    timeStyle: "medium",
  });

  return `
=== ‡¶Ö‡¶°‡¶ø‡¶ü ‡¶≤‡¶ó / AUDIT LOG ===
‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ / Action: ${action}
‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ / User: ${user?.name} (${user?.role})
‡¶∏‡¶Æ‡¶Ø‡¶º / Time: ${timestamp}
‡¶§‡¶•‡ßç‡¶Ø / Data: ${JSON.stringify(data, null, 2)}
=== ‡¶≤‡¶ó ‡¶∂‡ßá‡¶∑ / END LOG ===
  `.trim();
};

// üõ°Ô∏è Security Validation
export const validateSecurityPermissions = (
  user: any,
  action: string,
): ValidationResult => {
  const errors: string[] = [];

  if (!user) {
    errors.push("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï / User must be logged in");
    return { isValid: false, errors, warnings: [] };
  }

  const permissionMap: Record<string, string[]> = {
    create_batch: ["admin"],
    confirm_booking: ["admin", "manager"],
    cancel_booking: ["admin", "manager"],
    view_reports: ["admin", "manager"],
    manage_settings: ["admin"],
  };

  const requiredRoles = permissionMap[action];
  if (requiredRoles && !requiredRoles.includes(user.role)) {
    errors.push(
      `‡¶è‡¶á ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á / No permission for this action: ${action}`,
    );
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings: [],
  };
};

// üîÑ Wrapper functions for compatibility
export const validateForm = validateTicketBatch;
export const validateBusinessRules = (
  formData: any,
  existingData: any[] = [],
): ValidationResult => {
  const errors: string[] = [];

  // Check for duplicate flights on same date/time
  const existingFlight = existingData.find(
    (p) =>
      p.country === formData.country &&
      p.airline === formData.airline &&
      p.flightDate === formData.flightDate,
  );

  if (existingFlight) {
    errors.push(
      "‡¶è‡¶ï‡¶á ‡¶¶‡¶ø‡¶®‡ßá, ‡¶è‡¶ï‡¶á ‡¶è‡¶Ø‡¶ºÔøΩÔøΩ‡¶∞‡¶≤‡¶æ‡¶á‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ü‡¶ø‡¶ï‡ßá‡¶ü ‡¶ï‡ßç‡¶∞‡¶Ø‡¶º ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá / Tickets already purchased for same airline on this date",
    );
  }

  // Check minimum profit margin (10%)
  const estimatedSellingPrice = formData.buyingPrice * 1.15; // Minimum 15% markup
  if (
    estimatedSellingPrice - formData.buyingPrice <
    formData.buyingPrice * 0.1
  ) {
    errors.push(
      "‡¶≤‡¶æ‡¶≠‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ú‡¶ø‡¶® ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ßß‡ß¶% ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶® / Keep minimum 10% profit margin",
    );
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings: [],
  };
};

export default {
  validateBangladeshiPhone,
  validateEmail,
  validatePassportNumber,
  validatePrice,
  validateFlightDate,
  validateFlightTime,
  validateTicketQuantity,
  validateAgentInfo,
  calculateFinancials,
  validateStatusTransition,
  validatePassengerInfo,
  validateTicketBatch,
  generateAuditLog,
  validateSecurityPermissions,
  validateForm,
  validateBusinessRules,
};
